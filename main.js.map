{"version":3,"file":"main.js","mappings":"sKAIa,QAAAA,YAAgCC,OAEzCC,SACFC,SAEA,GAAqB,IAAjBA,MAAMC,OAAc,OAAO,EAC/B,KAAKF,MAAAA,aAAO,EAAPA,QAASC,OAAO,OAAO,EAE5B,MAAME,aAAyBH,QAAQC,MACvC,IAAK,MAAMG,QAAQH,MACjB,IAAKE,aAAaE,SAASD,MAAO,OAAO,EAE3C,OAAO,I,kLChBT,6CACA,0DAEA,MAAaE,iBAAiB,oBAAAC,WAA9B,c,oBAoCE,KAAAC,eAAiBT,MAAOU,GAAYL,OAClCM,KAAKC,KAAK,UAAUF,WAAY,CAAER,MAAO,CAACG,QApC5CL,2BACE,MAAMa,QAAU,CACdC,OAAQ,OACRC,IAAK,WAAWC,QAAQC,IAAIC,4BAC5BC,QAAS,CAAE,eAAgB,oBAC3BC,KAAM,CACJC,WAAY,qBACZC,UAAWN,QAAQC,IAAIM,+BACvBC,cAAeR,QAAQC,IAAIQ,mCAC3BC,SAAU,WAAWV,QAAQC,IAAIC,yBAIrC,OAAO,gBAAMS,QAAQd,SAGvBb,WAAW4B,KAAcC,gBACvB,MACET,MAAM,qBACET,KAAKmB,qBAETjB,QAAU,CACdC,OAAQ,OACRC,IAAK,WAAWC,QAAQC,IAAIC,sBAAwBU,KACpDT,QAAS,CACP,eAAgB,mBAChBY,cAAe,UAAUC,eACzB,gBAAiB,YAEnBZ,KAAMS,gBAGR,OAAO,gBAAMF,QAAQd,UAjCzB,2B,yOCFA,mDACA,oCAMA,MAAaoB,gBAAgB,oBAAAzB,WAC3B0B,YAAYC,QACVC,QAOF,KAAAC,kBAAoBrC,MAAOU,GAAY4B,eACrC3B,KAAKwB,OAAOI,OAGV,CACAC,SAAU,WAAAC,+BACVC,UAAW,CAAEhC,GAAI4B,gBAXnB3B,KAAKwB,OAASA,QAJlB,yB,iMCRA,wCACA,kCAGA,IAAMQ,SAAN,MAAMA,WAEJ,oBADC,eAAAC,Q,mFADGD,SAAQ,oBADb,eAAAE,cACKF,UAMN,IAAaG,iBAAb,MAAaA,iBAEX9C,qBACSC,QACc8C,aAErB,IAAK9C,QAAQS,GAAI,MAAM,IAAIsC,MAAM,wBAEjC,MAAMC,sBACEhD,QAAQiD,YAAYC,QAAQd,kBAChCpC,QAAQS,GACRqC,cAEF3B,KAAKgC,uBAAuBd,aAC9B,GAAIW,eAAgB,OACZhD,QAAQiD,YAAYG,SAAS5C,eACjCR,QAAQS,GACR,wBAEF4C,QAAQC,IAAIN,gBACZ,MAAMO,KAAO,IAAIb,SAEjB,OADAa,KAAKC,YAAcR,eACZO,KAET,MAAM,IAAIR,MAAM,mCAtBlB,oBADC,eAAAU,UAAUC,SAAYhB,UAAU,CAAEiB,UAAU,IAE1C,iCAAAC,OACA,iCAAAC,IAAI,iB,mFADkB,mB,QAAA,IAAP,UAAAC,SAAA,UAAAA,SAAO,mB,mGAHdjB,iBAAgB,oBAD5B,eAAAkB,UAAUC,IAAOtB,YACLG,kBAAA,QAAAA,iBAAAA,kB,4ICVb,gD,mlDCAA,kCACA,sDAYMoB,eAAiB,IAmKvB,SAAYC,mBAEV,2CAFF,CAAY,QAAAA,oBAAA,QAAAA,kBAAiB,KAkG7B,SAAYC,sBAEV,gDAEA,0CAEA,kDAEA,iCAEA,6BAEA,iCAZF,CAAY,QAAAA,uBAAA,QAAAA,qBAAoB,KAsEhC,SAAYC,sBAEV,gDAEA,0CAEA,kDAEA,iCAEA,6BAEA,iCAZF,CAAY,QAAAA,uBAAA,QAAAA,qBAAoB,KA0LhC,SAAYC,yBAEV,4DAFF,CAAY,QAAAA,0BAAA,QAAAA,wBAAuB,KA2FnC,SAAYC,4BAEV,iCAEA,mCAEA,iCAEA,uCAEA,+CAVF,CAAY,QAAAA,6BAAA,QAAAA,2BAA0B,KAuDtC,SAAYC,4BAEV,iCAEA,mCAEA,iCAEA,uCAEA,+CAVF,CAAY,QAAAA,6BAAA,QAAAA,2BAA0B,KAiGtC,SAAYC,kBAEV,wCAFF,CAAY,QAAAA,mBAAA,QAAAA,iBAAgB,KA2E5B,SAAYC,qBAEV,+CAEA,4BAEA,kCANF,CAAY,QAAAA,sBAAA,QAAAA,oBAAmB,KAiB/B,SAAYC,qBAEV,+CAEA,4BAEA,kCANF,CAAY,QAAAA,sBAAA,QAAAA,oBAAmB,KAqE/B,SAAYC,kBAEV,wCAFF,CAAY,QAAAA,mBAAA,QAAAA,iBAAgB,KAkF5B,SAAYC,qBAEV,gCAEA,4BAEA,gCANF,CAAY,QAAAA,sBAAA,QAAAA,oBAAmB,KAiB/B,SAAYC,qBAEV,gCAEA,4BAEA,gCANF,CAAY,QAAAA,sBAAA,QAAAA,oBAAmB,KAiH/B,SAAYC,qBAEV,iDAFF,CAAY,QAAAA,sBAAA,QAAAA,oBAAmB,KAiI/B,SAAYC,wBAEV,mCAEA,0CAEA,wDAEA,+BAEA,mCAEA,yCAEA,qCAEA,oDAEA,8CAEA,kDAEA,0DAEA,mCAxBF,CAAY,QAAAA,yBAAA,QAAAA,uBAAsB,KAgGlC,SAAYC,wBAEV,mCAEA,0CAEA,wDAEA,+BAEA,mCAEA,yCAEA,qCAEA,oDAEA,8CAEA,kDAEA,0DAEA,mCAxBF,CAAY,QAAAA,yBAAA,QAAAA,uBAAsB,KAyQlC,SAAYC,iBAEV,qCAFF,CAAY,QAAAA,kBAAA,QAAAA,gBAAe,KA0E3B,SAAYC,oBAEV,2BAEA,+BAJF,CAAY,QAAAA,qBAAA,QAAAA,mBAAkB,KAc9B,SAAYC,oBAEV,2BAEA,+BAJF,CAAY,QAAAA,qBAAA,QAAAA,mBAAkB,KAmE9B,SAAYC,mBAEV,2CAFF,CAAY,QAAAA,oBAAA,QAAAA,kBAAiB,KA2E7B,SAAYC,sBAEV,gDAEA,iCAEA,6BANF,CAAY,QAAAA,uBAAA,QAAAA,qBAAoB,KAiBhC,SAAYC,sBAEV,gDAEA,iCAEA,6BANF,CAAY,QAAAA,uBAAA,QAAAA,qBAAoB,KAiIhC,SAAYC,kBAEV,wCAFF,CAAY,QAAAA,mBAAA,QAAAA,iBAAgB,KAyF5B,SAAYC,8BAEV,0EAFF,CAAY,QAAAA,+BAAA,QAAAA,6BAA4B,KA+ExC,SAAYC,iCAEV,qDAEA,6DAEA,8CANF,CAAY,QAAAA,kCAAA,QAAAA,gCAA+B,KA6D3C,SAAYC,iCAEV,qDAEA,6DAEA,8CANF,CAAY,QAAAA,kCAAA,QAAAA,gCAA+B,KA+I3C,SAAYC,qBAEV,+CAEA,gCAEA,2CAEA,4BAEA,uCAEA,oCAEA,oCAdF,CAAY,QAAAA,sBAAA,QAAAA,oBAAmB,KAiF/B,SAAYC,qBAEV,+CAEA,gCAEA,2CAEA,4BAEA,uCAEA,oCAEA,oCAdF,CAAY,QAAAA,sBAAA,QAAAA,oBAAmB,KAivB/B,SAAYC,UAEV,mBAEA,yCAEA,uCAEA,qBAEA,2CAEA,yCAZF,CAAY,QAAAA,WAAA,QAAAA,SAAQ,KAqJpB,SAAYC,mBAEV,2CAFF,CAAY,QAAAA,oBAAA,QAAAA,kBAAiB,KAyF7B,SAAYC,wBAEV,yDAFF,CAAY,QAAAA,yBAAA,QAAAA,uBAAsB,KA+ElC,SAAYC,2BAEV,+CAEA,uDAEA,0CANF,CAAY,QAAAA,4BAAA,QAAAA,0BAAyB,KA6DrC,SAAYC,2BAEV,+CAEA,uDAEA,0CANF,CAAY,QAAAA,4BAAA,QAAAA,0BAAyB,KA0IrC,SAAYC,sBAEV,iCAEA,qCAEA,iCAEA,6BAEA,iCAVF,CAAY,QAAAA,uBAAA,QAAAA,qBAAoB,KAmEhC,SAAYC,sBAEV,iCAEA,qCAEA,iCAEA,6BAEA,iCAVF,CAAY,QAAAA,uBAAA,QAAAA,qBAAoB,KAuiBhC,SAAYC,4BAEV,qEAFF,CAAY,QAAAA,6BAAA,QAAAA,2BAA0B,KAmEtC,SAAYC,+BAEV,sCAEA,8CAJF,CAAY,QAAAA,gCAAA,QAAAA,8BAA6B,KAsCzC,SAAYC,+BAEV,sCAEA,8CAJF,CAAY,QAAAA,gCAAA,QAAAA,8BAA6B,KA0BzC,SAAYC,iBAEV,qCAFF,CAAY,QAAAA,kBAAA,QAAAA,gBAAe,KA8E3B,SAAYC,oBAEV,+BAEA,2BAJF,CAAY,QAAAA,qBAAA,QAAAA,mBAAkB,KAc9B,SAAYC,oBAEV,+BAEA,2BAJF,CAAY,QAAAA,qBAAA,QAAAA,mBAAkB,KAyb9B,SAAYC,sBAEV,yEAEA,0CAJF,CAAY,QAAAA,uBAAA,QAAAA,qBAAoB,KAmEhC,SAAYC,yBAEV,+CAEA,mDAEA,gCAEA,oCAEA,4CAVF,CAAY,QAAAA,0BAAA,QAAAA,wBAAuB,KAuBnC,SAAYC,yBAEV,+CAEA,mDAEA,gCAEA,oCAEA,4CAVF,CAAY,QAAAA,0BAAA,QAAAA,wBAAuB,KAkGnC,SAAYC,uBAEV,iDAEA,8BAEA,kCAEA,0CARF,CAAY,QAAAA,wBAAA,QAAAA,sBAAqB,KA0DpB,QAAAC,aAAe,SAAAC,GAAG;;;;;;;;;EA0B/B,8BACEC,aAEA,MAAMpG,QAAU,IAAKqD,kBAAmB+C,aACxC,OAAOC,OAAOC,SAAwC,QAAAJ,aAAclG,UAEtE,kCACEoG,aAEA,MAAMpG,QAAU,IAAKqD,kBAAmB+C,aACxC,OAAOC,OAAOE,aACZ,QAAAL,aACAlG,UAMS,QAAA4B,+BAAiC,SAAAuE,GAAG;;;;;;;;;EAiCjD,mDACEC,aAKA,MAAMpG,QAAU,IAAKqD,kBAAmB+C,aACxC,OAAOC,OAAOG,YAGZ,QAAA5E,+BAAgC5B,W,4ICruKpC,gD,qJCAA,wCAUA,4BACA,qCAGa,QAAAyG,mBAAqB,CAChCC,IACAC,OACAC,OACAC,MACAC,YAAmC,GACnCC,YAAoCC,MACpCC,SAAoBC,UACpBlH,QAA0B,MAE1B,MAAMM,QACO,SAAXsG,OACI,CAAEO,cAAe,UAAUN,WAC3B,CAAE,wBAAyB,GAAGA,WAE9BO,SAAW,SAAAC,eAAe,CAC9BX,IAAK,GAAGC,OAAS,QAAU,YAAYD,MACvCpG,QAAS,IAAKA,SACd0G,MAAOD,cAGHO,OAAS,IAAI,KAAAC,cAAc,CAC/Bb,IAAK,GAAGC,OAAS,MAAQ,UAAUD,MACnC1G,QAAS,CACPwH,MAAM,EACNC,WAAW,EACXC,iBAAkBvI,UAAY,CAC5BmB,QAAS,IAAKA,YAGlBqH,cAAeV,WAIXW,KAAO,SAAAC,OACX,EAAGC,UACD,MAAM,KAAM,WAAgB,YAAAC,kBAC1BD,OAEF,MAAgB,wBAATE,MAAgD,iBAAdC,YAE3CX,OACAF,UAYF,OARoD,IAAI,SAAAc,aAAa,CACnEC,MAAO,IAAI,SAAAC,cAActB,aACzBc,KACAvE,eAAgBrD,QAEhBqI,mBAAmB,M,aCjEvBC,OAAOC,QAAUC,QAAQ,mB,WCAzBF,OAAOC,QAAUC,QAAQ,2B,aCAzBF,OAAOC,QAAUC,QAAQ,6B,aCAzBF,OAAOC,QAAUC,QAAQ,sB,YCAzBF,OAAOC,QAAUC,QAAQ,0B,aCAzBF,OAAOC,QAAUC,QAAQ,U,YCAzBF,OAAOC,QAAUC,QAAQ,gB,aCAzBF,OAAOC,QAAUC,QAAQ,Y,aCAzBF,OAAOC,QAAUC,QAAQ,gB,aCAzBF,OAAOC,QAAUC,QAAQ,a,aCAzBF,OAAOC,QAAUC,QAAQ,U,aCAzBF,OAAOC,QAAUC,QAAQ,iB,aCAzBF,OAAOC,QAAUC,QAAQ,QCCrBC,yBAA2B,GAG/B,SAASC,oBAAoBC,UAE5B,IAAIC,aAAeH,yBAAyBE,UAC5C,QAAqBE,IAAjBD,aACH,OAAOA,aAAaL,QAGrB,IAAID,OAASG,yBAAyBE,UAAY,CAGjDJ,QAAS,IAOV,OAHAO,oBAAoBH,UAAUL,OAAQA,OAAOC,QAASG,qBAG/CJ,OAAOC,Q,+JCrBf,yCAEA,gDACA,+DACA,4DACA,gEACA,6DACA,wCACA,uCACA,qCAEA,oCACA,oCAEA,4BAEA,WACE,MAAMjH,OAAS,gBAAAmF,mBACbtG,QAAQC,IAAI2I,WACkB,WAA9B5I,QAAQC,IAAI4I,cACZ,gBACA,IAAM7I,QAAQC,IAAI6I,0BAClB,GACA,sBACAC,GACA,CACEpB,MAAO,CACLqB,YAAa,YAEfzH,OAAQ,CACNyH,YAAa,cAKbC,aAAe,eAAAC,YAAY,CAC/BC,UAAW,CAAC,WAAArH,kBACZ/C,YAAA,cAAAA,YACAqK,gBAAgB,IAGZC,IAAM,oBAGNC,OAAS,IAAI,wBAAAC,aAAa,CAC9BN,OACAhK,QAAS,EAAGuK,QACV,MAAMvK,QAA4B,CAChCuK,IACAC,KAAMD,IAAU,MA0BlB,OAvBIA,IAAU,MACRvK,QAAQuK,IAAU,KAAExJ,QAAQC,IAAIyJ,oBAEhCzK,QAAQuK,IAAU,KAAExJ,QAAQC,IAAIyJ,kBAC9B,4BAGFzK,QAAQC,MACND,QAAQuK,IAAU,KAAExJ,QAAQC,IAAIyJ,kBAC9B,2BAGJzK,QAAQuK,IAAU,KAAExJ,QAAQC,IAAIyJ,kBAC9B,sBAGFzK,QAAQS,GACNT,QAAQuK,IAAU,KAAExJ,QAAQC,IAAIyJ,kBAC9B,sBAKHzK,SAETiD,YAAa,KACJ,CACLjB,QAAS,IAAI,WAAAA,QAAQE,QACrBkB,SAAU,IAAI,YAAA9C,WAGlBoK,eAAe,IAIjBN,IAAIO,IA7CS,WA+CX,sBAAI,CACFC,qBAAqB,EAIrBC,OAAQ,mBAAQC,iBAAiB,CAC/B/B,OAAO,EACPgC,WAAW,EACXC,sBAAuB,EACvBC,QAAS,WAAWlK,QAAQC,IAAIC,uCAIlCQ,SAAUV,QAAQC,IAAIkK,gBACtBC,OAAQ,CAAC,WAAWpK,QAAQC,IAAIC,iBAChCmK,WAAY,CAAC,kBAIXf,OAAOgB,QAGbhB,OAAOiB,gBAAgB,CAAElB,IAAKzI,KArEjB,aAwEbyI,IAAImB,OAAO,CAAEC,KAAMzK,QAAQC,IAAIyK,MAAQ,MAAQ,IAC7CpI,QAAQC,IACN,uCAAuCvC,QAAQC,IAAIyK,MAAQ,MACzDpB,OAAOqB,kBArGf,I","sources":["webpack://idleverse/./apps/food/server/src/authChecker.ts","webpack://idleverse/./apps/food/server/src/datasources/auth0-api.ts","webpack://idleverse/./apps/food/server/src/datasources/food-api.ts","webpack://idleverse/./apps/food/server/src/entities/register.ts","webpack://idleverse/./libs/food-gql/src/index.ts","webpack://idleverse/./libs/food-gql/src/lib/food-api.ts","webpack://idleverse/./libs/graphql-utils/src/index.ts","webpack://idleverse/./libs/graphql-utils/src/lib/apollo-bootstrapper.ts","webpack://idleverse/external commonjs \"@apollo/client\"","webpack://idleverse/external commonjs \"@apollo/client/link/ws\"","webpack://idleverse/external commonjs \"@apollo/client/utilities\"","webpack://idleverse/external commonjs \"apollo-datasource\"","webpack://idleverse/external commonjs \"apollo-server-express\"","webpack://idleverse/external commonjs \"axios\"","webpack://idleverse/external commonjs \"cross-fetch\"","webpack://idleverse/external commonjs \"express\"","webpack://idleverse/external commonjs \"express-jwt\"","webpack://idleverse/external commonjs \"jwks-rsa\"","webpack://idleverse/external commonjs \"tslib\"","webpack://idleverse/external commonjs \"type-graphql\"","webpack://idleverse/external commonjs \"ws\"","webpack://idleverse/webpack/bootstrap","webpack://idleverse/./apps/food/server/src/main.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { AuthChecker } from 'type-graphql';\n\nexport const authChecker: AuthChecker<any> = async (\n  // { root, args, context, info },\n  { context },\n  roles\n) => {\n  if (roles.length === 0) return true;\n  if (!context?.roles) return false;\n\n  const idTokenRoles: string[] = context.roles;\n  for (const role of roles) {\n    if (!idTokenRoles.includes(role)) return false;\n  }\n  return true; // or false if access is denied\n};\n","import { DataSource } from 'apollo-datasource';\nimport axios, { AxiosRequestConfig } from 'axios';\n\nexport class Auth0API extends DataSource {\n  async getManagementToken() {\n    const options = {\n      method: 'POST',\n      url: `https://${process.env.AUTH0_DOMAIN}/oauth/token/`,\n      headers: { 'content-type': 'application/json' },\n      data: {\n        grant_type: 'client_credentials',\n        client_id: process.env.AUTH0_MANAGEMENT_API_CLIENT_ID,\n        client_secret: process.env.AUTH0_MANAGEMENT_API_CLIENT_SECRET,\n        audience: `https://${process.env.AUTH0_DOMAIN}/api/v2/`,\n      },\n    };\n\n    return axios.request(options as AxiosRequestConfig);\n  }\n\n  async post(path: string, requestOptions?: any) {\n    const {\n      data: { access_token },\n    } = await this.getManagementToken();\n\n    const options = {\n      method: 'POST',\n      url: `https://${process.env.AUTH0_DOMAIN}/api/v2` + path,\n      headers: {\n        'content-type': 'application/json',\n        authorization: `Bearer ${access_token}`,\n        'cache-control': 'no-cache',\n      },\n      data: requestOptions,\n    };\n\n    return axios.request(options as AxiosRequestConfig);\n  }\n\n  trySetUserRole = async (id: string, role: string) =>\n    this.post(`/users/${id}/roles`, { roles: [role] });\n}\n","import { ApolloClient, NormalizedCacheObject } from '@apollo/client';\nimport { DataSource } from 'apollo-datasource';\nimport {\n  SetDisplayNameByUserIdDocument,\n  SetDisplayNameByUserIdMutation,\n  SetDisplayNameByUserIdMutationVariables,\n} from '@idleverse/food-gql';\n\nexport class FoodAPI extends DataSource {\n  constructor(client: ApolloClient<NormalizedCacheObject>) {\n    super();\n\n    this.client = client;\n  }\n\n  client: ApolloClient<NormalizedCacheObject>;\n\n  trySetDisplayName = async (id: string, display_name: string) =>\n    this.client.mutate<\n      SetDisplayNameByUserIdMutation,\n      SetDisplayNameByUserIdMutationVariables\n    >({\n      mutation: SetDisplayNameByUserIdDocument,\n      variables: { id, display_name },\n    });\n}\n","import { Arg, Ctx, Field, Mutation, ObjectType, Resolver } from 'type-graphql';\nimport { Context } from '../datasources/context';\n\n@ObjectType()\nclass Register {\n  @Field()\n  updatedName: string;\n}\n\n@Resolver((of) => Register)\nexport class RegisterResolver {\n  @Mutation((returns) => Register, { nullable: true })\n  async setDisplayName(\n    @Ctx() context: Context,\n    @Arg('display_name') displayName: string\n  ) {\n    if (!context.id) throw new Error('User id not in token');\n\n    const resDisplayName = (\n      await context.dataSources.foodAPI.trySetDisplayName(\n        context.id,\n        displayName\n      )\n    ).data.update_user_info_by_pk.display_name;\n    if (resDisplayName) {\n      await context.dataSources.auth0API.trySetUserRole(\n        context.id,\n        'rol_10vO6MmzARbpP2nL'\n      );\n      console.log(resDisplayName);\n      const shit = new Register();\n      shit.updatedName = resDisplayName;\n      return shit;\n    }\n    throw new Error('Failed to insert display name');\n  }\n}\n","export * from './lib/food-api';\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = {\n  [K in keyof T]: T[K];\n};\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & {\n  [SubKey in K]?: Maybe<T[SubKey]>;\n};\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {\n  [SubKey in K]: Maybe<T[SubKey]>;\n};\nconst defaultOptions = {} as const;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  uuid: any;\n};\n\n/** Boolean expression to compare columns of type \"Boolean\". All fields are combined with logical 'AND'. */\nexport type Boolean_Comparison_Exp = {\n  _eq?: InputMaybe<Scalars['Boolean']>;\n  _gt?: InputMaybe<Scalars['Boolean']>;\n  _gte?: InputMaybe<Scalars['Boolean']>;\n  _in?: InputMaybe<Array<Scalars['Boolean']>>;\n  _is_null?: InputMaybe<Scalars['Boolean']>;\n  _lt?: InputMaybe<Scalars['Boolean']>;\n  _lte?: InputMaybe<Scalars['Boolean']>;\n  _neq?: InputMaybe<Scalars['Boolean']>;\n  _nin?: InputMaybe<Array<Scalars['Boolean']>>;\n};\n\n/** Boolean expression to compare columns of type \"Int\". All fields are combined with logical 'AND'. */\nexport type Int_Comparison_Exp = {\n  _eq?: InputMaybe<Scalars['Int']>;\n  _gt?: InputMaybe<Scalars['Int']>;\n  _gte?: InputMaybe<Scalars['Int']>;\n  _in?: InputMaybe<Array<Scalars['Int']>>;\n  _is_null?: InputMaybe<Scalars['Boolean']>;\n  _lt?: InputMaybe<Scalars['Int']>;\n  _lte?: InputMaybe<Scalars['Int']>;\n  _neq?: InputMaybe<Scalars['Int']>;\n  _nin?: InputMaybe<Array<Scalars['Int']>>;\n};\n\n/** Boolean expression to compare columns of type \"String\". All fields are combined with logical 'AND'. */\nexport type String_Comparison_Exp = {\n  _eq?: InputMaybe<Scalars['String']>;\n  _gt?: InputMaybe<Scalars['String']>;\n  _gte?: InputMaybe<Scalars['String']>;\n  /** does the column match the given case-insensitive pattern */\n  _ilike?: InputMaybe<Scalars['String']>;\n  _in?: InputMaybe<Array<Scalars['String']>>;\n  /** does the column match the given POSIX regular expression, case insensitive */\n  _iregex?: InputMaybe<Scalars['String']>;\n  _is_null?: InputMaybe<Scalars['Boolean']>;\n  /** does the column match the given pattern */\n  _like?: InputMaybe<Scalars['String']>;\n  _lt?: InputMaybe<Scalars['String']>;\n  _lte?: InputMaybe<Scalars['String']>;\n  _neq?: InputMaybe<Scalars['String']>;\n  /** does the column NOT match the given case-insensitive pattern */\n  _nilike?: InputMaybe<Scalars['String']>;\n  _nin?: InputMaybe<Array<Scalars['String']>>;\n  /** does the column NOT match the given POSIX regular expression, case insensitive */\n  _niregex?: InputMaybe<Scalars['String']>;\n  /** does the column NOT match the given pattern */\n  _nlike?: InputMaybe<Scalars['String']>;\n  /** does the column NOT match the given POSIX regular expression, case sensitive */\n  _nregex?: InputMaybe<Scalars['String']>;\n  /** does the column NOT match the given SQL regular expression */\n  _nsimilar?: InputMaybe<Scalars['String']>;\n  /** does the column match the given POSIX regular expression, case sensitive */\n  _regex?: InputMaybe<Scalars['String']>;\n  /** does the column match the given SQL regular expression */\n  _similar?: InputMaybe<Scalars['String']>;\n};\n\n/** columns and relationships of \"advert\" */\nexport type Advert = {\n  __typename?: 'advert';\n  /** An object relationship */\n  boardObjectByBoardObject: Board_Object;\n  board_object: Scalars['uuid'];\n  food_kind: Scalars['uuid'];\n  food_quantity: Scalars['Int'];\n  game: Scalars['uuid'];\n  /** An object relationship */\n  gameByGame: Game;\n  id: Scalars['uuid'];\n  kind: Scalars['uuid'];\n};\n\n/** aggregated selection of \"advert\" */\nexport type Advert_Aggregate = {\n  __typename?: 'advert_aggregate';\n  aggregate?: Maybe<Advert_Aggregate_Fields>;\n  nodes: Array<Advert>;\n};\n\n/** aggregate fields of \"advert\" */\nexport type Advert_Aggregate_Fields = {\n  __typename?: 'advert_aggregate_fields';\n  avg?: Maybe<Advert_Avg_Fields>;\n  count: Scalars['Int'];\n  max?: Maybe<Advert_Max_Fields>;\n  min?: Maybe<Advert_Min_Fields>;\n  stddev?: Maybe<Advert_Stddev_Fields>;\n  stddev_pop?: Maybe<Advert_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Advert_Stddev_Samp_Fields>;\n  sum?: Maybe<Advert_Sum_Fields>;\n  var_pop?: Maybe<Advert_Var_Pop_Fields>;\n  var_samp?: Maybe<Advert_Var_Samp_Fields>;\n  variance?: Maybe<Advert_Variance_Fields>;\n};\n\n/** aggregate fields of \"advert\" */\nexport type Advert_Aggregate_FieldsCountArgs = {\n  columns?: InputMaybe<Array<Advert_Select_Column>>;\n  distinct?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"advert\" */\nexport type Advert_Aggregate_Order_By = {\n  avg?: InputMaybe<Advert_Avg_Order_By>;\n  count?: InputMaybe<Order_By>;\n  max?: InputMaybe<Advert_Max_Order_By>;\n  min?: InputMaybe<Advert_Min_Order_By>;\n  stddev?: InputMaybe<Advert_Stddev_Order_By>;\n  stddev_pop?: InputMaybe<Advert_Stddev_Pop_Order_By>;\n  stddev_samp?: InputMaybe<Advert_Stddev_Samp_Order_By>;\n  sum?: InputMaybe<Advert_Sum_Order_By>;\n  var_pop?: InputMaybe<Advert_Var_Pop_Order_By>;\n  var_samp?: InputMaybe<Advert_Var_Samp_Order_By>;\n  variance?: InputMaybe<Advert_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"advert\" */\nexport type Advert_Arr_Rel_Insert_Input = {\n  data: Array<Advert_Insert_Input>;\n  /** on conflict condition */\n  on_conflict?: InputMaybe<Advert_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Advert_Avg_Fields = {\n  __typename?: 'advert_avg_fields';\n  food_quantity?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"advert\" */\nexport type Advert_Avg_Order_By = {\n  food_quantity?: InputMaybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"advert\". All fields are combined with a logical 'AND'. */\nexport type Advert_Bool_Exp = {\n  _and?: InputMaybe<Array<Advert_Bool_Exp>>;\n  _not?: InputMaybe<Advert_Bool_Exp>;\n  _or?: InputMaybe<Array<Advert_Bool_Exp>>;\n  boardObjectByBoardObject?: InputMaybe<Board_Object_Bool_Exp>;\n  board_object?: InputMaybe<Uuid_Comparison_Exp>;\n  food_kind?: InputMaybe<Uuid_Comparison_Exp>;\n  food_quantity?: InputMaybe<Int_Comparison_Exp>;\n  game?: InputMaybe<Uuid_Comparison_Exp>;\n  gameByGame?: InputMaybe<Game_Bool_Exp>;\n  id?: InputMaybe<Uuid_Comparison_Exp>;\n  kind?: InputMaybe<Uuid_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"advert\" */\nexport enum Advert_Constraint {\n  /** unique or primary key constraint */\n  AdvertPkey = 'advert_pkey',\n}\n\n/** input type for incrementing numeric columns in table \"advert\" */\nexport type Advert_Inc_Input = {\n  food_quantity?: InputMaybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"advert\" */\nexport type Advert_Insert_Input = {\n  boardObjectByBoardObject?: InputMaybe<Board_Object_Obj_Rel_Insert_Input>;\n  board_object?: InputMaybe<Scalars['uuid']>;\n  food_kind?: InputMaybe<Scalars['uuid']>;\n  food_quantity?: InputMaybe<Scalars['Int']>;\n  game?: InputMaybe<Scalars['uuid']>;\n  gameByGame?: InputMaybe<Game_Obj_Rel_Insert_Input>;\n  id?: InputMaybe<Scalars['uuid']>;\n  kind?: InputMaybe<Scalars['uuid']>;\n};\n\n/** aggregate max on columns */\nexport type Advert_Max_Fields = {\n  __typename?: 'advert_max_fields';\n  board_object?: Maybe<Scalars['uuid']>;\n  food_kind?: Maybe<Scalars['uuid']>;\n  food_quantity?: Maybe<Scalars['Int']>;\n  game?: Maybe<Scalars['uuid']>;\n  id?: Maybe<Scalars['uuid']>;\n  kind?: Maybe<Scalars['uuid']>;\n};\n\n/** order by max() on columns of table \"advert\" */\nexport type Advert_Max_Order_By = {\n  board_object?: InputMaybe<Order_By>;\n  food_kind?: InputMaybe<Order_By>;\n  food_quantity?: InputMaybe<Order_By>;\n  game?: InputMaybe<Order_By>;\n  id?: InputMaybe<Order_By>;\n  kind?: InputMaybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Advert_Min_Fields = {\n  __typename?: 'advert_min_fields';\n  board_object?: Maybe<Scalars['uuid']>;\n  food_kind?: Maybe<Scalars['uuid']>;\n  food_quantity?: Maybe<Scalars['Int']>;\n  game?: Maybe<Scalars['uuid']>;\n  id?: Maybe<Scalars['uuid']>;\n  kind?: Maybe<Scalars['uuid']>;\n};\n\n/** order by min() on columns of table \"advert\" */\nexport type Advert_Min_Order_By = {\n  board_object?: InputMaybe<Order_By>;\n  food_kind?: InputMaybe<Order_By>;\n  food_quantity?: InputMaybe<Order_By>;\n  game?: InputMaybe<Order_By>;\n  id?: InputMaybe<Order_By>;\n  kind?: InputMaybe<Order_By>;\n};\n\n/** response of any mutation on the table \"advert\" */\nexport type Advert_Mutation_Response = {\n  __typename?: 'advert_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<Advert>;\n};\n\n/** on conflict condition type for table \"advert\" */\nexport type Advert_On_Conflict = {\n  constraint: Advert_Constraint;\n  update_columns?: Array<Advert_Update_Column>;\n  where?: InputMaybe<Advert_Bool_Exp>;\n};\n\n/** Ordering options when selecting data from \"advert\". */\nexport type Advert_Order_By = {\n  boardObjectByBoardObject?: InputMaybe<Board_Object_Order_By>;\n  board_object?: InputMaybe<Order_By>;\n  food_kind?: InputMaybe<Order_By>;\n  food_quantity?: InputMaybe<Order_By>;\n  game?: InputMaybe<Order_By>;\n  gameByGame?: InputMaybe<Game_Order_By>;\n  id?: InputMaybe<Order_By>;\n  kind?: InputMaybe<Order_By>;\n};\n\n/** primary key columns input for table: advert */\nexport type Advert_Pk_Columns_Input = {\n  id: Scalars['uuid'];\n};\n\n/** select columns of table \"advert\" */\nexport enum Advert_Select_Column {\n  /** column name */\n  BoardObject = 'board_object',\n  /** column name */\n  FoodKind = 'food_kind',\n  /** column name */\n  FoodQuantity = 'food_quantity',\n  /** column name */\n  Game = 'game',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Kind = 'kind',\n}\n\n/** input type for updating data in table \"advert\" */\nexport type Advert_Set_Input = {\n  board_object?: InputMaybe<Scalars['uuid']>;\n  food_kind?: InputMaybe<Scalars['uuid']>;\n  food_quantity?: InputMaybe<Scalars['Int']>;\n  game?: InputMaybe<Scalars['uuid']>;\n  id?: InputMaybe<Scalars['uuid']>;\n  kind?: InputMaybe<Scalars['uuid']>;\n};\n\n/** aggregate stddev on columns */\nexport type Advert_Stddev_Fields = {\n  __typename?: 'advert_stddev_fields';\n  food_quantity?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"advert\" */\nexport type Advert_Stddev_Order_By = {\n  food_quantity?: InputMaybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Advert_Stddev_Pop_Fields = {\n  __typename?: 'advert_stddev_pop_fields';\n  food_quantity?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"advert\" */\nexport type Advert_Stddev_Pop_Order_By = {\n  food_quantity?: InputMaybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Advert_Stddev_Samp_Fields = {\n  __typename?: 'advert_stddev_samp_fields';\n  food_quantity?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"advert\" */\nexport type Advert_Stddev_Samp_Order_By = {\n  food_quantity?: InputMaybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Advert_Sum_Fields = {\n  __typename?: 'advert_sum_fields';\n  food_quantity?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"advert\" */\nexport type Advert_Sum_Order_By = {\n  food_quantity?: InputMaybe<Order_By>;\n};\n\n/** update columns of table \"advert\" */\nexport enum Advert_Update_Column {\n  /** column name */\n  BoardObject = 'board_object',\n  /** column name */\n  FoodKind = 'food_kind',\n  /** column name */\n  FoodQuantity = 'food_quantity',\n  /** column name */\n  Game = 'game',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Kind = 'kind',\n}\n\n/** aggregate var_pop on columns */\nexport type Advert_Var_Pop_Fields = {\n  __typename?: 'advert_var_pop_fields';\n  food_quantity?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"advert\" */\nexport type Advert_Var_Pop_Order_By = {\n  food_quantity?: InputMaybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Advert_Var_Samp_Fields = {\n  __typename?: 'advert_var_samp_fields';\n  food_quantity?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"advert\" */\nexport type Advert_Var_Samp_Order_By = {\n  food_quantity?: InputMaybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Advert_Variance_Fields = {\n  __typename?: 'advert_variance_fields';\n  food_quantity?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"advert\" */\nexport type Advert_Variance_Order_By = {\n  food_quantity?: InputMaybe<Order_By>;\n};\n\n/** columns and relationships of \"board_object\" */\nexport type Board_Object = {\n  __typename?: 'board_object';\n  /** An array relationship */\n  adverts: Array<Advert>;\n  /** An aggregate relationship */\n  adverts_aggregate: Advert_Aggregate;\n  /** An array relationship */\n  diners: Array<Diner>;\n  /** An aggregate relationship */\n  diners_aggregate: Diner_Aggregate;\n  /** An object relationship */\n  drink?: Maybe<Drink>;\n  /** An array relationship */\n  gardens: Array<Garden>;\n  /** An aggregate relationship */\n  gardens_aggregate: Garden_Aggregate;\n  /** An object relationship */\n  house?: Maybe<House>;\n  i: Scalars['Int'];\n  id: Scalars['uuid'];\n  j: Scalars['Int'];\n  kind: Scalars['String'];\n  /** An object relationship */\n  road?: Maybe<Road>;\n  rotation: Scalars['Int'];\n};\n\n/** columns and relationships of \"board_object\" */\nexport type Board_ObjectAdvertsArgs = {\n  distinct_on?: InputMaybe<Array<Advert_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Advert_Order_By>>;\n  where?: InputMaybe<Advert_Bool_Exp>;\n};\n\n/** columns and relationships of \"board_object\" */\nexport type Board_ObjectAdverts_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Advert_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Advert_Order_By>>;\n  where?: InputMaybe<Advert_Bool_Exp>;\n};\n\n/** columns and relationships of \"board_object\" */\nexport type Board_ObjectDinersArgs = {\n  distinct_on?: InputMaybe<Array<Diner_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Diner_Order_By>>;\n  where?: InputMaybe<Diner_Bool_Exp>;\n};\n\n/** columns and relationships of \"board_object\" */\nexport type Board_ObjectDiners_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Diner_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Diner_Order_By>>;\n  where?: InputMaybe<Diner_Bool_Exp>;\n};\n\n/** columns and relationships of \"board_object\" */\nexport type Board_ObjectGardensArgs = {\n  distinct_on?: InputMaybe<Array<Garden_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Garden_Order_By>>;\n  where?: InputMaybe<Garden_Bool_Exp>;\n};\n\n/** columns and relationships of \"board_object\" */\nexport type Board_ObjectGardens_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Garden_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Garden_Order_By>>;\n  where?: InputMaybe<Garden_Bool_Exp>;\n};\n\n/** aggregated selection of \"board_object\" */\nexport type Board_Object_Aggregate = {\n  __typename?: 'board_object_aggregate';\n  aggregate?: Maybe<Board_Object_Aggregate_Fields>;\n  nodes: Array<Board_Object>;\n};\n\n/** aggregate fields of \"board_object\" */\nexport type Board_Object_Aggregate_Fields = {\n  __typename?: 'board_object_aggregate_fields';\n  avg?: Maybe<Board_Object_Avg_Fields>;\n  count: Scalars['Int'];\n  max?: Maybe<Board_Object_Max_Fields>;\n  min?: Maybe<Board_Object_Min_Fields>;\n  stddev?: Maybe<Board_Object_Stddev_Fields>;\n  stddev_pop?: Maybe<Board_Object_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Board_Object_Stddev_Samp_Fields>;\n  sum?: Maybe<Board_Object_Sum_Fields>;\n  var_pop?: Maybe<Board_Object_Var_Pop_Fields>;\n  var_samp?: Maybe<Board_Object_Var_Samp_Fields>;\n  variance?: Maybe<Board_Object_Variance_Fields>;\n};\n\n/** aggregate fields of \"board_object\" */\nexport type Board_Object_Aggregate_FieldsCountArgs = {\n  columns?: InputMaybe<Array<Board_Object_Select_Column>>;\n  distinct?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** aggregate avg on columns */\nexport type Board_Object_Avg_Fields = {\n  __typename?: 'board_object_avg_fields';\n  i?: Maybe<Scalars['Float']>;\n  j?: Maybe<Scalars['Float']>;\n  rotation?: Maybe<Scalars['Float']>;\n};\n\n/** Boolean expression to filter rows from the table \"board_object\". All fields are combined with a logical 'AND'. */\nexport type Board_Object_Bool_Exp = {\n  _and?: InputMaybe<Array<Board_Object_Bool_Exp>>;\n  _not?: InputMaybe<Board_Object_Bool_Exp>;\n  _or?: InputMaybe<Array<Board_Object_Bool_Exp>>;\n  adverts?: InputMaybe<Advert_Bool_Exp>;\n  diners?: InputMaybe<Diner_Bool_Exp>;\n  drink?: InputMaybe<Drink_Bool_Exp>;\n  gardens?: InputMaybe<Garden_Bool_Exp>;\n  house?: InputMaybe<House_Bool_Exp>;\n  i?: InputMaybe<Int_Comparison_Exp>;\n  id?: InputMaybe<Uuid_Comparison_Exp>;\n  j?: InputMaybe<Int_Comparison_Exp>;\n  kind?: InputMaybe<String_Comparison_Exp>;\n  road?: InputMaybe<Road_Bool_Exp>;\n  rotation?: InputMaybe<Int_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"board_object\" */\nexport enum Board_Object_Constraint {\n  /** unique or primary key constraint */\n  BoardObjectPkey = 'board_object_pkey',\n}\n\n/** input type for incrementing numeric columns in table \"board_object\" */\nexport type Board_Object_Inc_Input = {\n  i?: InputMaybe<Scalars['Int']>;\n  j?: InputMaybe<Scalars['Int']>;\n  rotation?: InputMaybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"board_object\" */\nexport type Board_Object_Insert_Input = {\n  adverts?: InputMaybe<Advert_Arr_Rel_Insert_Input>;\n  diners?: InputMaybe<Diner_Arr_Rel_Insert_Input>;\n  drink?: InputMaybe<Drink_Obj_Rel_Insert_Input>;\n  gardens?: InputMaybe<Garden_Arr_Rel_Insert_Input>;\n  house?: InputMaybe<House_Obj_Rel_Insert_Input>;\n  i?: InputMaybe<Scalars['Int']>;\n  id?: InputMaybe<Scalars['uuid']>;\n  j?: InputMaybe<Scalars['Int']>;\n  kind?: InputMaybe<Scalars['String']>;\n  road?: InputMaybe<Road_Obj_Rel_Insert_Input>;\n  rotation?: InputMaybe<Scalars['Int']>;\n};\n\n/** aggregate max on columns */\nexport type Board_Object_Max_Fields = {\n  __typename?: 'board_object_max_fields';\n  i?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['uuid']>;\n  j?: Maybe<Scalars['Int']>;\n  kind?: Maybe<Scalars['String']>;\n  rotation?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate min on columns */\nexport type Board_Object_Min_Fields = {\n  __typename?: 'board_object_min_fields';\n  i?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['uuid']>;\n  j?: Maybe<Scalars['Int']>;\n  kind?: Maybe<Scalars['String']>;\n  rotation?: Maybe<Scalars['Int']>;\n};\n\n/** response of any mutation on the table \"board_object\" */\nexport type Board_Object_Mutation_Response = {\n  __typename?: 'board_object_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<Board_Object>;\n};\n\n/** input type for inserting object relation for remote table \"board_object\" */\nexport type Board_Object_Obj_Rel_Insert_Input = {\n  data: Board_Object_Insert_Input;\n  /** on conflict condition */\n  on_conflict?: InputMaybe<Board_Object_On_Conflict>;\n};\n\n/** on conflict condition type for table \"board_object\" */\nexport type Board_Object_On_Conflict = {\n  constraint: Board_Object_Constraint;\n  update_columns?: Array<Board_Object_Update_Column>;\n  where?: InputMaybe<Board_Object_Bool_Exp>;\n};\n\n/** Ordering options when selecting data from \"board_object\". */\nexport type Board_Object_Order_By = {\n  adverts_aggregate?: InputMaybe<Advert_Aggregate_Order_By>;\n  diners_aggregate?: InputMaybe<Diner_Aggregate_Order_By>;\n  drink?: InputMaybe<Drink_Order_By>;\n  gardens_aggregate?: InputMaybe<Garden_Aggregate_Order_By>;\n  house?: InputMaybe<House_Order_By>;\n  i?: InputMaybe<Order_By>;\n  id?: InputMaybe<Order_By>;\n  j?: InputMaybe<Order_By>;\n  kind?: InputMaybe<Order_By>;\n  road?: InputMaybe<Road_Order_By>;\n  rotation?: InputMaybe<Order_By>;\n};\n\n/** primary key columns input for table: board_object */\nexport type Board_Object_Pk_Columns_Input = {\n  id: Scalars['uuid'];\n};\n\n/** select columns of table \"board_object\" */\nexport enum Board_Object_Select_Column {\n  /** column name */\n  I = 'i',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  J = 'j',\n  /** column name */\n  Kind = 'kind',\n  /** column name */\n  Rotation = 'rotation',\n}\n\n/** input type for updating data in table \"board_object\" */\nexport type Board_Object_Set_Input = {\n  i?: InputMaybe<Scalars['Int']>;\n  id?: InputMaybe<Scalars['uuid']>;\n  j?: InputMaybe<Scalars['Int']>;\n  kind?: InputMaybe<Scalars['String']>;\n  rotation?: InputMaybe<Scalars['Int']>;\n};\n\n/** aggregate stddev on columns */\nexport type Board_Object_Stddev_Fields = {\n  __typename?: 'board_object_stddev_fields';\n  i?: Maybe<Scalars['Float']>;\n  j?: Maybe<Scalars['Float']>;\n  rotation?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Board_Object_Stddev_Pop_Fields = {\n  __typename?: 'board_object_stddev_pop_fields';\n  i?: Maybe<Scalars['Float']>;\n  j?: Maybe<Scalars['Float']>;\n  rotation?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Board_Object_Stddev_Samp_Fields = {\n  __typename?: 'board_object_stddev_samp_fields';\n  i?: Maybe<Scalars['Float']>;\n  j?: Maybe<Scalars['Float']>;\n  rotation?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate sum on columns */\nexport type Board_Object_Sum_Fields = {\n  __typename?: 'board_object_sum_fields';\n  i?: Maybe<Scalars['Int']>;\n  j?: Maybe<Scalars['Int']>;\n  rotation?: Maybe<Scalars['Int']>;\n};\n\n/** update columns of table \"board_object\" */\nexport enum Board_Object_Update_Column {\n  /** column name */\n  I = 'i',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  J = 'j',\n  /** column name */\n  Kind = 'kind',\n  /** column name */\n  Rotation = 'rotation',\n}\n\n/** aggregate var_pop on columns */\nexport type Board_Object_Var_Pop_Fields = {\n  __typename?: 'board_object_var_pop_fields';\n  i?: Maybe<Scalars['Float']>;\n  j?: Maybe<Scalars['Float']>;\n  rotation?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate var_samp on columns */\nexport type Board_Object_Var_Samp_Fields = {\n  __typename?: 'board_object_var_samp_fields';\n  i?: Maybe<Scalars['Float']>;\n  j?: Maybe<Scalars['Float']>;\n  rotation?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate variance on columns */\nexport type Board_Object_Variance_Fields = {\n  __typename?: 'board_object_variance_fields';\n  i?: Maybe<Scalars['Float']>;\n  j?: Maybe<Scalars['Float']>;\n  rotation?: Maybe<Scalars['Float']>;\n};\n\n/** columns and relationships of \"diner\" */\nexport type Diner = {\n  __typename?: 'diner';\n  /** An object relationship */\n  boardObjectByBoardObject?: Maybe<Board_Object>;\n  board_object?: Maybe<Scalars['uuid']>;\n  id: Scalars['uuid'];\n  owner: Scalars['uuid'];\n  /** An object relationship */\n  player: Player;\n};\n\n/** aggregated selection of \"diner\" */\nexport type Diner_Aggregate = {\n  __typename?: 'diner_aggregate';\n  aggregate?: Maybe<Diner_Aggregate_Fields>;\n  nodes: Array<Diner>;\n};\n\n/** aggregate fields of \"diner\" */\nexport type Diner_Aggregate_Fields = {\n  __typename?: 'diner_aggregate_fields';\n  count: Scalars['Int'];\n  max?: Maybe<Diner_Max_Fields>;\n  min?: Maybe<Diner_Min_Fields>;\n};\n\n/** aggregate fields of \"diner\" */\nexport type Diner_Aggregate_FieldsCountArgs = {\n  columns?: InputMaybe<Array<Diner_Select_Column>>;\n  distinct?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"diner\" */\nexport type Diner_Aggregate_Order_By = {\n  count?: InputMaybe<Order_By>;\n  max?: InputMaybe<Diner_Max_Order_By>;\n  min?: InputMaybe<Diner_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"diner\" */\nexport type Diner_Arr_Rel_Insert_Input = {\n  data: Array<Diner_Insert_Input>;\n  /** on conflict condition */\n  on_conflict?: InputMaybe<Diner_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"diner\". All fields are combined with a logical 'AND'. */\nexport type Diner_Bool_Exp = {\n  _and?: InputMaybe<Array<Diner_Bool_Exp>>;\n  _not?: InputMaybe<Diner_Bool_Exp>;\n  _or?: InputMaybe<Array<Diner_Bool_Exp>>;\n  boardObjectByBoardObject?: InputMaybe<Board_Object_Bool_Exp>;\n  board_object?: InputMaybe<Uuid_Comparison_Exp>;\n  id?: InputMaybe<Uuid_Comparison_Exp>;\n  owner?: InputMaybe<Uuid_Comparison_Exp>;\n  player?: InputMaybe<Player_Bool_Exp>;\n};\n\n/** unique or primary key constraints on table \"diner\" */\nexport enum Diner_Constraint {\n  /** unique or primary key constraint */\n  DinerPkey = 'diner_pkey',\n}\n\n/** input type for inserting data into table \"diner\" */\nexport type Diner_Insert_Input = {\n  boardObjectByBoardObject?: InputMaybe<Board_Object_Obj_Rel_Insert_Input>;\n  board_object?: InputMaybe<Scalars['uuid']>;\n  id?: InputMaybe<Scalars['uuid']>;\n  owner?: InputMaybe<Scalars['uuid']>;\n  player?: InputMaybe<Player_Obj_Rel_Insert_Input>;\n};\n\n/** aggregate max on columns */\nexport type Diner_Max_Fields = {\n  __typename?: 'diner_max_fields';\n  board_object?: Maybe<Scalars['uuid']>;\n  id?: Maybe<Scalars['uuid']>;\n  owner?: Maybe<Scalars['uuid']>;\n};\n\n/** order by max() on columns of table \"diner\" */\nexport type Diner_Max_Order_By = {\n  board_object?: InputMaybe<Order_By>;\n  id?: InputMaybe<Order_By>;\n  owner?: InputMaybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Diner_Min_Fields = {\n  __typename?: 'diner_min_fields';\n  board_object?: Maybe<Scalars['uuid']>;\n  id?: Maybe<Scalars['uuid']>;\n  owner?: Maybe<Scalars['uuid']>;\n};\n\n/** order by min() on columns of table \"diner\" */\nexport type Diner_Min_Order_By = {\n  board_object?: InputMaybe<Order_By>;\n  id?: InputMaybe<Order_By>;\n  owner?: InputMaybe<Order_By>;\n};\n\n/** response of any mutation on the table \"diner\" */\nexport type Diner_Mutation_Response = {\n  __typename?: 'diner_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<Diner>;\n};\n\n/** on conflict condition type for table \"diner\" */\nexport type Diner_On_Conflict = {\n  constraint: Diner_Constraint;\n  update_columns?: Array<Diner_Update_Column>;\n  where?: InputMaybe<Diner_Bool_Exp>;\n};\n\n/** Ordering options when selecting data from \"diner\". */\nexport type Diner_Order_By = {\n  boardObjectByBoardObject?: InputMaybe<Board_Object_Order_By>;\n  board_object?: InputMaybe<Order_By>;\n  id?: InputMaybe<Order_By>;\n  owner?: InputMaybe<Order_By>;\n  player?: InputMaybe<Player_Order_By>;\n};\n\n/** primary key columns input for table: diner */\nexport type Diner_Pk_Columns_Input = {\n  id: Scalars['uuid'];\n};\n\n/** select columns of table \"diner\" */\nexport enum Diner_Select_Column {\n  /** column name */\n  BoardObject = 'board_object',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Owner = 'owner',\n}\n\n/** input type for updating data in table \"diner\" */\nexport type Diner_Set_Input = {\n  board_object?: InputMaybe<Scalars['uuid']>;\n  id?: InputMaybe<Scalars['uuid']>;\n  owner?: InputMaybe<Scalars['uuid']>;\n};\n\n/** update columns of table \"diner\" */\nexport enum Diner_Update_Column {\n  /** column name */\n  BoardObject = 'board_object',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Owner = 'owner',\n}\n\n/** columns and relationships of \"drink\" */\nexport type Drink = {\n  __typename?: 'drink';\n  /** An object relationship */\n  board_object: Board_Object;\n  game: Scalars['uuid'];\n  /** An object relationship */\n  gameByGame: Game;\n  id: Scalars['uuid'];\n  kind: Scalars['uuid'];\n};\n\n/** aggregated selection of \"drink\" */\nexport type Drink_Aggregate = {\n  __typename?: 'drink_aggregate';\n  aggregate?: Maybe<Drink_Aggregate_Fields>;\n  nodes: Array<Drink>;\n};\n\n/** aggregate fields of \"drink\" */\nexport type Drink_Aggregate_Fields = {\n  __typename?: 'drink_aggregate_fields';\n  count: Scalars['Int'];\n  max?: Maybe<Drink_Max_Fields>;\n  min?: Maybe<Drink_Min_Fields>;\n};\n\n/** aggregate fields of \"drink\" */\nexport type Drink_Aggregate_FieldsCountArgs = {\n  columns?: InputMaybe<Array<Drink_Select_Column>>;\n  distinct?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"drink\" */\nexport type Drink_Aggregate_Order_By = {\n  count?: InputMaybe<Order_By>;\n  max?: InputMaybe<Drink_Max_Order_By>;\n  min?: InputMaybe<Drink_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"drink\" */\nexport type Drink_Arr_Rel_Insert_Input = {\n  data: Array<Drink_Insert_Input>;\n  /** on conflict condition */\n  on_conflict?: InputMaybe<Drink_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"drink\". All fields are combined with a logical 'AND'. */\nexport type Drink_Bool_Exp = {\n  _and?: InputMaybe<Array<Drink_Bool_Exp>>;\n  _not?: InputMaybe<Drink_Bool_Exp>;\n  _or?: InputMaybe<Array<Drink_Bool_Exp>>;\n  board_object?: InputMaybe<Board_Object_Bool_Exp>;\n  game?: InputMaybe<Uuid_Comparison_Exp>;\n  gameByGame?: InputMaybe<Game_Bool_Exp>;\n  id?: InputMaybe<Uuid_Comparison_Exp>;\n  kind?: InputMaybe<Uuid_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"drink\" */\nexport enum Drink_Constraint {\n  /** unique or primary key constraint */\n  DrinkPkey = 'drink_pkey',\n}\n\n/** input type for inserting data into table \"drink\" */\nexport type Drink_Insert_Input = {\n  board_object?: InputMaybe<Board_Object_Obj_Rel_Insert_Input>;\n  game?: InputMaybe<Scalars['uuid']>;\n  gameByGame?: InputMaybe<Game_Obj_Rel_Insert_Input>;\n  id?: InputMaybe<Scalars['uuid']>;\n  kind?: InputMaybe<Scalars['uuid']>;\n};\n\n/** aggregate max on columns */\nexport type Drink_Max_Fields = {\n  __typename?: 'drink_max_fields';\n  game?: Maybe<Scalars['uuid']>;\n  id?: Maybe<Scalars['uuid']>;\n  kind?: Maybe<Scalars['uuid']>;\n};\n\n/** order by max() on columns of table \"drink\" */\nexport type Drink_Max_Order_By = {\n  game?: InputMaybe<Order_By>;\n  id?: InputMaybe<Order_By>;\n  kind?: InputMaybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Drink_Min_Fields = {\n  __typename?: 'drink_min_fields';\n  game?: Maybe<Scalars['uuid']>;\n  id?: Maybe<Scalars['uuid']>;\n  kind?: Maybe<Scalars['uuid']>;\n};\n\n/** order by min() on columns of table \"drink\" */\nexport type Drink_Min_Order_By = {\n  game?: InputMaybe<Order_By>;\n  id?: InputMaybe<Order_By>;\n  kind?: InputMaybe<Order_By>;\n};\n\n/** response of any mutation on the table \"drink\" */\nexport type Drink_Mutation_Response = {\n  __typename?: 'drink_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<Drink>;\n};\n\n/** input type for inserting object relation for remote table \"drink\" */\nexport type Drink_Obj_Rel_Insert_Input = {\n  data: Drink_Insert_Input;\n  /** on conflict condition */\n  on_conflict?: InputMaybe<Drink_On_Conflict>;\n};\n\n/** on conflict condition type for table \"drink\" */\nexport type Drink_On_Conflict = {\n  constraint: Drink_Constraint;\n  update_columns?: Array<Drink_Update_Column>;\n  where?: InputMaybe<Drink_Bool_Exp>;\n};\n\n/** Ordering options when selecting data from \"drink\". */\nexport type Drink_Order_By = {\n  board_object?: InputMaybe<Board_Object_Order_By>;\n  game?: InputMaybe<Order_By>;\n  gameByGame?: InputMaybe<Game_Order_By>;\n  id?: InputMaybe<Order_By>;\n  kind?: InputMaybe<Order_By>;\n};\n\n/** primary key columns input for table: drink */\nexport type Drink_Pk_Columns_Input = {\n  id: Scalars['uuid'];\n};\n\n/** select columns of table \"drink\" */\nexport enum Drink_Select_Column {\n  /** column name */\n  Game = 'game',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Kind = 'kind',\n}\n\n/** input type for updating data in table \"drink\" */\nexport type Drink_Set_Input = {\n  game?: InputMaybe<Scalars['uuid']>;\n  id?: InputMaybe<Scalars['uuid']>;\n  kind?: InputMaybe<Scalars['uuid']>;\n};\n\n/** update columns of table \"drink\" */\nexport enum Drink_Update_Column {\n  /** column name */\n  Game = 'game',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Kind = 'kind',\n}\n\n/** columns and relationships of \"employee\" */\nexport type Employee = {\n  __typename?: 'employee';\n  game: Scalars['uuid'];\n  /** An object relationship */\n  gameByGame: Game;\n  hired_by: Scalars['uuid'];\n  hires_available: Scalars['Int'];\n  id: Scalars['uuid'];\n  kind: Scalars['String'];\n  manager: Scalars['uuid'];\n  owner: Scalars['uuid'];\n  promoted_from: Scalars['uuid'];\n  trained_by: Scalars['uuid'];\n  trained_from: Scalars['uuid'];\n  trains_available: Scalars['Int'];\n  used: Scalars['Boolean'];\n};\n\n/** aggregated selection of \"employee\" */\nexport type Employee_Aggregate = {\n  __typename?: 'employee_aggregate';\n  aggregate?: Maybe<Employee_Aggregate_Fields>;\n  nodes: Array<Employee>;\n};\n\n/** aggregate fields of \"employee\" */\nexport type Employee_Aggregate_Fields = {\n  __typename?: 'employee_aggregate_fields';\n  avg?: Maybe<Employee_Avg_Fields>;\n  count: Scalars['Int'];\n  max?: Maybe<Employee_Max_Fields>;\n  min?: Maybe<Employee_Min_Fields>;\n  stddev?: Maybe<Employee_Stddev_Fields>;\n  stddev_pop?: Maybe<Employee_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Employee_Stddev_Samp_Fields>;\n  sum?: Maybe<Employee_Sum_Fields>;\n  var_pop?: Maybe<Employee_Var_Pop_Fields>;\n  var_samp?: Maybe<Employee_Var_Samp_Fields>;\n  variance?: Maybe<Employee_Variance_Fields>;\n};\n\n/** aggregate fields of \"employee\" */\nexport type Employee_Aggregate_FieldsCountArgs = {\n  columns?: InputMaybe<Array<Employee_Select_Column>>;\n  distinct?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"employee\" */\nexport type Employee_Aggregate_Order_By = {\n  avg?: InputMaybe<Employee_Avg_Order_By>;\n  count?: InputMaybe<Order_By>;\n  max?: InputMaybe<Employee_Max_Order_By>;\n  min?: InputMaybe<Employee_Min_Order_By>;\n  stddev?: InputMaybe<Employee_Stddev_Order_By>;\n  stddev_pop?: InputMaybe<Employee_Stddev_Pop_Order_By>;\n  stddev_samp?: InputMaybe<Employee_Stddev_Samp_Order_By>;\n  sum?: InputMaybe<Employee_Sum_Order_By>;\n  var_pop?: InputMaybe<Employee_Var_Pop_Order_By>;\n  var_samp?: InputMaybe<Employee_Var_Samp_Order_By>;\n  variance?: InputMaybe<Employee_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"employee\" */\nexport type Employee_Arr_Rel_Insert_Input = {\n  data: Array<Employee_Insert_Input>;\n  /** on conflict condition */\n  on_conflict?: InputMaybe<Employee_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Employee_Avg_Fields = {\n  __typename?: 'employee_avg_fields';\n  hires_available?: Maybe<Scalars['Float']>;\n  trains_available?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"employee\" */\nexport type Employee_Avg_Order_By = {\n  hires_available?: InputMaybe<Order_By>;\n  trains_available?: InputMaybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"employee\". All fields are combined with a logical 'AND'. */\nexport type Employee_Bool_Exp = {\n  _and?: InputMaybe<Array<Employee_Bool_Exp>>;\n  _not?: InputMaybe<Employee_Bool_Exp>;\n  _or?: InputMaybe<Array<Employee_Bool_Exp>>;\n  game?: InputMaybe<Uuid_Comparison_Exp>;\n  gameByGame?: InputMaybe<Game_Bool_Exp>;\n  hired_by?: InputMaybe<Uuid_Comparison_Exp>;\n  hires_available?: InputMaybe<Int_Comparison_Exp>;\n  id?: InputMaybe<Uuid_Comparison_Exp>;\n  kind?: InputMaybe<String_Comparison_Exp>;\n  manager?: InputMaybe<Uuid_Comparison_Exp>;\n  owner?: InputMaybe<Uuid_Comparison_Exp>;\n  promoted_from?: InputMaybe<Uuid_Comparison_Exp>;\n  trained_by?: InputMaybe<Uuid_Comparison_Exp>;\n  trained_from?: InputMaybe<Uuid_Comparison_Exp>;\n  trains_available?: InputMaybe<Int_Comparison_Exp>;\n  used?: InputMaybe<Boolean_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"employee\" */\nexport enum Employee_Constraint {\n  /** unique or primary key constraint */\n  EmployeePkey = 'employee_pkey',\n}\n\n/** input type for incrementing numeric columns in table \"employee\" */\nexport type Employee_Inc_Input = {\n  hires_available?: InputMaybe<Scalars['Int']>;\n  trains_available?: InputMaybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"employee\" */\nexport type Employee_Insert_Input = {\n  game?: InputMaybe<Scalars['uuid']>;\n  gameByGame?: InputMaybe<Game_Obj_Rel_Insert_Input>;\n  hired_by?: InputMaybe<Scalars['uuid']>;\n  hires_available?: InputMaybe<Scalars['Int']>;\n  id?: InputMaybe<Scalars['uuid']>;\n  kind?: InputMaybe<Scalars['String']>;\n  manager?: InputMaybe<Scalars['uuid']>;\n  owner?: InputMaybe<Scalars['uuid']>;\n  promoted_from?: InputMaybe<Scalars['uuid']>;\n  trained_by?: InputMaybe<Scalars['uuid']>;\n  trained_from?: InputMaybe<Scalars['uuid']>;\n  trains_available?: InputMaybe<Scalars['Int']>;\n  used?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** aggregate max on columns */\nexport type Employee_Max_Fields = {\n  __typename?: 'employee_max_fields';\n  game?: Maybe<Scalars['uuid']>;\n  hired_by?: Maybe<Scalars['uuid']>;\n  hires_available?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['uuid']>;\n  kind?: Maybe<Scalars['String']>;\n  manager?: Maybe<Scalars['uuid']>;\n  owner?: Maybe<Scalars['uuid']>;\n  promoted_from?: Maybe<Scalars['uuid']>;\n  trained_by?: Maybe<Scalars['uuid']>;\n  trained_from?: Maybe<Scalars['uuid']>;\n  trains_available?: Maybe<Scalars['Int']>;\n};\n\n/** order by max() on columns of table \"employee\" */\nexport type Employee_Max_Order_By = {\n  game?: InputMaybe<Order_By>;\n  hired_by?: InputMaybe<Order_By>;\n  hires_available?: InputMaybe<Order_By>;\n  id?: InputMaybe<Order_By>;\n  kind?: InputMaybe<Order_By>;\n  manager?: InputMaybe<Order_By>;\n  owner?: InputMaybe<Order_By>;\n  promoted_from?: InputMaybe<Order_By>;\n  trained_by?: InputMaybe<Order_By>;\n  trained_from?: InputMaybe<Order_By>;\n  trains_available?: InputMaybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Employee_Min_Fields = {\n  __typename?: 'employee_min_fields';\n  game?: Maybe<Scalars['uuid']>;\n  hired_by?: Maybe<Scalars['uuid']>;\n  hires_available?: Maybe<Scalars['Int']>;\n  id?: Maybe<Scalars['uuid']>;\n  kind?: Maybe<Scalars['String']>;\n  manager?: Maybe<Scalars['uuid']>;\n  owner?: Maybe<Scalars['uuid']>;\n  promoted_from?: Maybe<Scalars['uuid']>;\n  trained_by?: Maybe<Scalars['uuid']>;\n  trained_from?: Maybe<Scalars['uuid']>;\n  trains_available?: Maybe<Scalars['Int']>;\n};\n\n/** order by min() on columns of table \"employee\" */\nexport type Employee_Min_Order_By = {\n  game?: InputMaybe<Order_By>;\n  hired_by?: InputMaybe<Order_By>;\n  hires_available?: InputMaybe<Order_By>;\n  id?: InputMaybe<Order_By>;\n  kind?: InputMaybe<Order_By>;\n  manager?: InputMaybe<Order_By>;\n  owner?: InputMaybe<Order_By>;\n  promoted_from?: InputMaybe<Order_By>;\n  trained_by?: InputMaybe<Order_By>;\n  trained_from?: InputMaybe<Order_By>;\n  trains_available?: InputMaybe<Order_By>;\n};\n\n/** response of any mutation on the table \"employee\" */\nexport type Employee_Mutation_Response = {\n  __typename?: 'employee_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<Employee>;\n};\n\n/** on conflict condition type for table \"employee\" */\nexport type Employee_On_Conflict = {\n  constraint: Employee_Constraint;\n  update_columns?: Array<Employee_Update_Column>;\n  where?: InputMaybe<Employee_Bool_Exp>;\n};\n\n/** Ordering options when selecting data from \"employee\". */\nexport type Employee_Order_By = {\n  game?: InputMaybe<Order_By>;\n  gameByGame?: InputMaybe<Game_Order_By>;\n  hired_by?: InputMaybe<Order_By>;\n  hires_available?: InputMaybe<Order_By>;\n  id?: InputMaybe<Order_By>;\n  kind?: InputMaybe<Order_By>;\n  manager?: InputMaybe<Order_By>;\n  owner?: InputMaybe<Order_By>;\n  promoted_from?: InputMaybe<Order_By>;\n  trained_by?: InputMaybe<Order_By>;\n  trained_from?: InputMaybe<Order_By>;\n  trains_available?: InputMaybe<Order_By>;\n  used?: InputMaybe<Order_By>;\n};\n\n/** primary key columns input for table: employee */\nexport type Employee_Pk_Columns_Input = {\n  id: Scalars['uuid'];\n};\n\n/** select columns of table \"employee\" */\nexport enum Employee_Select_Column {\n  /** column name */\n  Game = 'game',\n  /** column name */\n  HiredBy = 'hired_by',\n  /** column name */\n  HiresAvailable = 'hires_available',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Kind = 'kind',\n  /** column name */\n  Manager = 'manager',\n  /** column name */\n  Owner = 'owner',\n  /** column name */\n  PromotedFrom = 'promoted_from',\n  /** column name */\n  TrainedBy = 'trained_by',\n  /** column name */\n  TrainedFrom = 'trained_from',\n  /** column name */\n  TrainsAvailable = 'trains_available',\n  /** column name */\n  Used = 'used',\n}\n\n/** input type for updating data in table \"employee\" */\nexport type Employee_Set_Input = {\n  game?: InputMaybe<Scalars['uuid']>;\n  hired_by?: InputMaybe<Scalars['uuid']>;\n  hires_available?: InputMaybe<Scalars['Int']>;\n  id?: InputMaybe<Scalars['uuid']>;\n  kind?: InputMaybe<Scalars['String']>;\n  manager?: InputMaybe<Scalars['uuid']>;\n  owner?: InputMaybe<Scalars['uuid']>;\n  promoted_from?: InputMaybe<Scalars['uuid']>;\n  trained_by?: InputMaybe<Scalars['uuid']>;\n  trained_from?: InputMaybe<Scalars['uuid']>;\n  trains_available?: InputMaybe<Scalars['Int']>;\n  used?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** aggregate stddev on columns */\nexport type Employee_Stddev_Fields = {\n  __typename?: 'employee_stddev_fields';\n  hires_available?: Maybe<Scalars['Float']>;\n  trains_available?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"employee\" */\nexport type Employee_Stddev_Order_By = {\n  hires_available?: InputMaybe<Order_By>;\n  trains_available?: InputMaybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Employee_Stddev_Pop_Fields = {\n  __typename?: 'employee_stddev_pop_fields';\n  hires_available?: Maybe<Scalars['Float']>;\n  trains_available?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"employee\" */\nexport type Employee_Stddev_Pop_Order_By = {\n  hires_available?: InputMaybe<Order_By>;\n  trains_available?: InputMaybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Employee_Stddev_Samp_Fields = {\n  __typename?: 'employee_stddev_samp_fields';\n  hires_available?: Maybe<Scalars['Float']>;\n  trains_available?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"employee\" */\nexport type Employee_Stddev_Samp_Order_By = {\n  hires_available?: InputMaybe<Order_By>;\n  trains_available?: InputMaybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Employee_Sum_Fields = {\n  __typename?: 'employee_sum_fields';\n  hires_available?: Maybe<Scalars['Int']>;\n  trains_available?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"employee\" */\nexport type Employee_Sum_Order_By = {\n  hires_available?: InputMaybe<Order_By>;\n  trains_available?: InputMaybe<Order_By>;\n};\n\n/** update columns of table \"employee\" */\nexport enum Employee_Update_Column {\n  /** column name */\n  Game = 'game',\n  /** column name */\n  HiredBy = 'hired_by',\n  /** column name */\n  HiresAvailable = 'hires_available',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Kind = 'kind',\n  /** column name */\n  Manager = 'manager',\n  /** column name */\n  Owner = 'owner',\n  /** column name */\n  PromotedFrom = 'promoted_from',\n  /** column name */\n  TrainedBy = 'trained_by',\n  /** column name */\n  TrainedFrom = 'trained_from',\n  /** column name */\n  TrainsAvailable = 'trains_available',\n  /** column name */\n  Used = 'used',\n}\n\n/** aggregate var_pop on columns */\nexport type Employee_Var_Pop_Fields = {\n  __typename?: 'employee_var_pop_fields';\n  hires_available?: Maybe<Scalars['Float']>;\n  trains_available?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"employee\" */\nexport type Employee_Var_Pop_Order_By = {\n  hires_available?: InputMaybe<Order_By>;\n  trains_available?: InputMaybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Employee_Var_Samp_Fields = {\n  __typename?: 'employee_var_samp_fields';\n  hires_available?: Maybe<Scalars['Float']>;\n  trains_available?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"employee\" */\nexport type Employee_Var_Samp_Order_By = {\n  hires_available?: InputMaybe<Order_By>;\n  trains_available?: InputMaybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Employee_Variance_Fields = {\n  __typename?: 'employee_variance_fields';\n  hires_available?: Maybe<Scalars['Float']>;\n  trains_available?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"employee\" */\nexport type Employee_Variance_Order_By = {\n  hires_available?: InputMaybe<Order_By>;\n  trains_available?: InputMaybe<Order_By>;\n};\n\n/** columns and relationships of \"game\" */\nexport type Game = {\n  __typename?: 'game';\n  /** An array relationship */\n  adverts: Array<Advert>;\n  /** An aggregate relationship */\n  adverts_aggregate: Advert_Aggregate;\n  /** An array relationship */\n  drinks: Array<Drink>;\n  /** An aggregate relationship */\n  drinks_aggregate: Drink_Aggregate;\n  /** An array relationship */\n  employees: Array<Employee>;\n  /** An aggregate relationship */\n  employees_aggregate: Employee_Aggregate;\n  /** An array relationship */\n  gardens: Array<Garden>;\n  /** An aggregate relationship */\n  gardens_aggregate: Garden_Aggregate;\n  /** An array relationship */\n  houses: Array<House>;\n  /** An aggregate relationship */\n  houses_aggregate: House_Aggregate;\n  id: Scalars['uuid'];\n  name?: Maybe<Scalars['String']>;\n  /** An array relationship */\n  players: Array<Player>;\n  /** An aggregate relationship */\n  players_aggregate: Player_Aggregate;\n  /** An array relationship */\n  roads: Array<Road>;\n  /** An aggregate relationship */\n  roads_aggregate: Road_Aggregate;\n};\n\n/** columns and relationships of \"game\" */\nexport type GameAdvertsArgs = {\n  distinct_on?: InputMaybe<Array<Advert_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Advert_Order_By>>;\n  where?: InputMaybe<Advert_Bool_Exp>;\n};\n\n/** columns and relationships of \"game\" */\nexport type GameAdverts_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Advert_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Advert_Order_By>>;\n  where?: InputMaybe<Advert_Bool_Exp>;\n};\n\n/** columns and relationships of \"game\" */\nexport type GameDrinksArgs = {\n  distinct_on?: InputMaybe<Array<Drink_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Drink_Order_By>>;\n  where?: InputMaybe<Drink_Bool_Exp>;\n};\n\n/** columns and relationships of \"game\" */\nexport type GameDrinks_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Drink_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Drink_Order_By>>;\n  where?: InputMaybe<Drink_Bool_Exp>;\n};\n\n/** columns and relationships of \"game\" */\nexport type GameEmployeesArgs = {\n  distinct_on?: InputMaybe<Array<Employee_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Employee_Order_By>>;\n  where?: InputMaybe<Employee_Bool_Exp>;\n};\n\n/** columns and relationships of \"game\" */\nexport type GameEmployees_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Employee_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Employee_Order_By>>;\n  where?: InputMaybe<Employee_Bool_Exp>;\n};\n\n/** columns and relationships of \"game\" */\nexport type GameGardensArgs = {\n  distinct_on?: InputMaybe<Array<Garden_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Garden_Order_By>>;\n  where?: InputMaybe<Garden_Bool_Exp>;\n};\n\n/** columns and relationships of \"game\" */\nexport type GameGardens_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Garden_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Garden_Order_By>>;\n  where?: InputMaybe<Garden_Bool_Exp>;\n};\n\n/** columns and relationships of \"game\" */\nexport type GameHousesArgs = {\n  distinct_on?: InputMaybe<Array<House_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<House_Order_By>>;\n  where?: InputMaybe<House_Bool_Exp>;\n};\n\n/** columns and relationships of \"game\" */\nexport type GameHouses_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<House_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<House_Order_By>>;\n  where?: InputMaybe<House_Bool_Exp>;\n};\n\n/** columns and relationships of \"game\" */\nexport type GamePlayersArgs = {\n  distinct_on?: InputMaybe<Array<Player_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Player_Order_By>>;\n  where?: InputMaybe<Player_Bool_Exp>;\n};\n\n/** columns and relationships of \"game\" */\nexport type GamePlayers_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Player_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Player_Order_By>>;\n  where?: InputMaybe<Player_Bool_Exp>;\n};\n\n/** columns and relationships of \"game\" */\nexport type GameRoadsArgs = {\n  distinct_on?: InputMaybe<Array<Road_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Road_Order_By>>;\n  where?: InputMaybe<Road_Bool_Exp>;\n};\n\n/** columns and relationships of \"game\" */\nexport type GameRoads_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Road_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Road_Order_By>>;\n  where?: InputMaybe<Road_Bool_Exp>;\n};\n\n/** aggregated selection of \"game\" */\nexport type Game_Aggregate = {\n  __typename?: 'game_aggregate';\n  aggregate?: Maybe<Game_Aggregate_Fields>;\n  nodes: Array<Game>;\n};\n\n/** aggregate fields of \"game\" */\nexport type Game_Aggregate_Fields = {\n  __typename?: 'game_aggregate_fields';\n  count: Scalars['Int'];\n  max?: Maybe<Game_Max_Fields>;\n  min?: Maybe<Game_Min_Fields>;\n};\n\n/** aggregate fields of \"game\" */\nexport type Game_Aggregate_FieldsCountArgs = {\n  columns?: InputMaybe<Array<Game_Select_Column>>;\n  distinct?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** Boolean expression to filter rows from the table \"game\". All fields are combined with a logical 'AND'. */\nexport type Game_Bool_Exp = {\n  _and?: InputMaybe<Array<Game_Bool_Exp>>;\n  _not?: InputMaybe<Game_Bool_Exp>;\n  _or?: InputMaybe<Array<Game_Bool_Exp>>;\n  adverts?: InputMaybe<Advert_Bool_Exp>;\n  drinks?: InputMaybe<Drink_Bool_Exp>;\n  employees?: InputMaybe<Employee_Bool_Exp>;\n  gardens?: InputMaybe<Garden_Bool_Exp>;\n  houses?: InputMaybe<House_Bool_Exp>;\n  id?: InputMaybe<Uuid_Comparison_Exp>;\n  name?: InputMaybe<String_Comparison_Exp>;\n  players?: InputMaybe<Player_Bool_Exp>;\n  roads?: InputMaybe<Road_Bool_Exp>;\n};\n\n/** unique or primary key constraints on table \"game\" */\nexport enum Game_Constraint {\n  /** unique or primary key constraint */\n  GamePkey = 'game_pkey',\n}\n\n/** input type for inserting data into table \"game\" */\nexport type Game_Insert_Input = {\n  adverts?: InputMaybe<Advert_Arr_Rel_Insert_Input>;\n  drinks?: InputMaybe<Drink_Arr_Rel_Insert_Input>;\n  employees?: InputMaybe<Employee_Arr_Rel_Insert_Input>;\n  gardens?: InputMaybe<Garden_Arr_Rel_Insert_Input>;\n  houses?: InputMaybe<House_Arr_Rel_Insert_Input>;\n  id?: InputMaybe<Scalars['uuid']>;\n  name?: InputMaybe<Scalars['String']>;\n  players?: InputMaybe<Player_Arr_Rel_Insert_Input>;\n  roads?: InputMaybe<Road_Arr_Rel_Insert_Input>;\n};\n\n/** aggregate max on columns */\nexport type Game_Max_Fields = {\n  __typename?: 'game_max_fields';\n  id?: Maybe<Scalars['uuid']>;\n  name?: Maybe<Scalars['String']>;\n};\n\n/** aggregate min on columns */\nexport type Game_Min_Fields = {\n  __typename?: 'game_min_fields';\n  id?: Maybe<Scalars['uuid']>;\n  name?: Maybe<Scalars['String']>;\n};\n\n/** response of any mutation on the table \"game\" */\nexport type Game_Mutation_Response = {\n  __typename?: 'game_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<Game>;\n};\n\n/** input type for inserting object relation for remote table \"game\" */\nexport type Game_Obj_Rel_Insert_Input = {\n  data: Game_Insert_Input;\n  /** on conflict condition */\n  on_conflict?: InputMaybe<Game_On_Conflict>;\n};\n\n/** on conflict condition type for table \"game\" */\nexport type Game_On_Conflict = {\n  constraint: Game_Constraint;\n  update_columns?: Array<Game_Update_Column>;\n  where?: InputMaybe<Game_Bool_Exp>;\n};\n\n/** Ordering options when selecting data from \"game\". */\nexport type Game_Order_By = {\n  adverts_aggregate?: InputMaybe<Advert_Aggregate_Order_By>;\n  drinks_aggregate?: InputMaybe<Drink_Aggregate_Order_By>;\n  employees_aggregate?: InputMaybe<Employee_Aggregate_Order_By>;\n  gardens_aggregate?: InputMaybe<Garden_Aggregate_Order_By>;\n  houses_aggregate?: InputMaybe<House_Aggregate_Order_By>;\n  id?: InputMaybe<Order_By>;\n  name?: InputMaybe<Order_By>;\n  players_aggregate?: InputMaybe<Player_Aggregate_Order_By>;\n  roads_aggregate?: InputMaybe<Road_Aggregate_Order_By>;\n};\n\n/** primary key columns input for table: game */\nexport type Game_Pk_Columns_Input = {\n  id: Scalars['uuid'];\n};\n\n/** select columns of table \"game\" */\nexport enum Game_Select_Column {\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Name = 'name',\n}\n\n/** input type for updating data in table \"game\" */\nexport type Game_Set_Input = {\n  id?: InputMaybe<Scalars['uuid']>;\n  name?: InputMaybe<Scalars['String']>;\n};\n\n/** update columns of table \"game\" */\nexport enum Game_Update_Column {\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Name = 'name',\n}\n\n/** columns and relationships of \"garden\" */\nexport type Garden = {\n  __typename?: 'garden';\n  /** An object relationship */\n  boardObjectByBoardObject: Board_Object;\n  board_object: Scalars['uuid'];\n  game: Scalars['uuid'];\n  /** An object relationship */\n  gameByGame: Game;\n  id: Scalars['uuid'];\n};\n\n/** aggregated selection of \"garden\" */\nexport type Garden_Aggregate = {\n  __typename?: 'garden_aggregate';\n  aggregate?: Maybe<Garden_Aggregate_Fields>;\n  nodes: Array<Garden>;\n};\n\n/** aggregate fields of \"garden\" */\nexport type Garden_Aggregate_Fields = {\n  __typename?: 'garden_aggregate_fields';\n  count: Scalars['Int'];\n  max?: Maybe<Garden_Max_Fields>;\n  min?: Maybe<Garden_Min_Fields>;\n};\n\n/** aggregate fields of \"garden\" */\nexport type Garden_Aggregate_FieldsCountArgs = {\n  columns?: InputMaybe<Array<Garden_Select_Column>>;\n  distinct?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"garden\" */\nexport type Garden_Aggregate_Order_By = {\n  count?: InputMaybe<Order_By>;\n  max?: InputMaybe<Garden_Max_Order_By>;\n  min?: InputMaybe<Garden_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"garden\" */\nexport type Garden_Arr_Rel_Insert_Input = {\n  data: Array<Garden_Insert_Input>;\n  /** on conflict condition */\n  on_conflict?: InputMaybe<Garden_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"garden\". All fields are combined with a logical 'AND'. */\nexport type Garden_Bool_Exp = {\n  _and?: InputMaybe<Array<Garden_Bool_Exp>>;\n  _not?: InputMaybe<Garden_Bool_Exp>;\n  _or?: InputMaybe<Array<Garden_Bool_Exp>>;\n  boardObjectByBoardObject?: InputMaybe<Board_Object_Bool_Exp>;\n  board_object?: InputMaybe<Uuid_Comparison_Exp>;\n  game?: InputMaybe<Uuid_Comparison_Exp>;\n  gameByGame?: InputMaybe<Game_Bool_Exp>;\n  id?: InputMaybe<Uuid_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"garden\" */\nexport enum Garden_Constraint {\n  /** unique or primary key constraint */\n  GardenPkey = 'garden_pkey',\n}\n\n/** input type for inserting data into table \"garden\" */\nexport type Garden_Insert_Input = {\n  boardObjectByBoardObject?: InputMaybe<Board_Object_Obj_Rel_Insert_Input>;\n  board_object?: InputMaybe<Scalars['uuid']>;\n  game?: InputMaybe<Scalars['uuid']>;\n  gameByGame?: InputMaybe<Game_Obj_Rel_Insert_Input>;\n  id?: InputMaybe<Scalars['uuid']>;\n};\n\n/** aggregate max on columns */\nexport type Garden_Max_Fields = {\n  __typename?: 'garden_max_fields';\n  board_object?: Maybe<Scalars['uuid']>;\n  game?: Maybe<Scalars['uuid']>;\n  id?: Maybe<Scalars['uuid']>;\n};\n\n/** order by max() on columns of table \"garden\" */\nexport type Garden_Max_Order_By = {\n  board_object?: InputMaybe<Order_By>;\n  game?: InputMaybe<Order_By>;\n  id?: InputMaybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Garden_Min_Fields = {\n  __typename?: 'garden_min_fields';\n  board_object?: Maybe<Scalars['uuid']>;\n  game?: Maybe<Scalars['uuid']>;\n  id?: Maybe<Scalars['uuid']>;\n};\n\n/** order by min() on columns of table \"garden\" */\nexport type Garden_Min_Order_By = {\n  board_object?: InputMaybe<Order_By>;\n  game?: InputMaybe<Order_By>;\n  id?: InputMaybe<Order_By>;\n};\n\n/** response of any mutation on the table \"garden\" */\nexport type Garden_Mutation_Response = {\n  __typename?: 'garden_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<Garden>;\n};\n\n/** on conflict condition type for table \"garden\" */\nexport type Garden_On_Conflict = {\n  constraint: Garden_Constraint;\n  update_columns?: Array<Garden_Update_Column>;\n  where?: InputMaybe<Garden_Bool_Exp>;\n};\n\n/** Ordering options when selecting data from \"garden\". */\nexport type Garden_Order_By = {\n  boardObjectByBoardObject?: InputMaybe<Board_Object_Order_By>;\n  board_object?: InputMaybe<Order_By>;\n  game?: InputMaybe<Order_By>;\n  gameByGame?: InputMaybe<Game_Order_By>;\n  id?: InputMaybe<Order_By>;\n};\n\n/** primary key columns input for table: garden */\nexport type Garden_Pk_Columns_Input = {\n  id: Scalars['uuid'];\n};\n\n/** select columns of table \"garden\" */\nexport enum Garden_Select_Column {\n  /** column name */\n  BoardObject = 'board_object',\n  /** column name */\n  Game = 'game',\n  /** column name */\n  Id = 'id',\n}\n\n/** input type for updating data in table \"garden\" */\nexport type Garden_Set_Input = {\n  board_object?: InputMaybe<Scalars['uuid']>;\n  game?: InputMaybe<Scalars['uuid']>;\n  id?: InputMaybe<Scalars['uuid']>;\n};\n\n/** update columns of table \"garden\" */\nexport enum Garden_Update_Column {\n  /** column name */\n  BoardObject = 'board_object',\n  /** column name */\n  Game = 'game',\n  /** column name */\n  Id = 'id',\n}\n\n/** columns and relationships of \"house\" */\nexport type House = {\n  __typename?: 'house';\n  /** An object relationship */\n  boardObjectById: Board_Object;\n  board_object?: Maybe<Scalars['uuid']>;\n  game: Scalars['uuid'];\n  /** An object relationship */\n  gameByGame: Game;\n  has_garden: Scalars['Boolean'];\n  /** An array relationship */\n  house_food_demands: Array<House_Food_Demand>;\n  /** An aggregate relationship */\n  house_food_demands_aggregate: House_Food_Demand_Aggregate;\n  id: Scalars['uuid'];\n  is_extra: Scalars['Boolean'];\n  number: Scalars['Int'];\n  orient: Scalars['Int'];\n};\n\n/** columns and relationships of \"house\" */\nexport type HouseHouse_Food_DemandsArgs = {\n  distinct_on?: InputMaybe<Array<House_Food_Demand_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<House_Food_Demand_Order_By>>;\n  where?: InputMaybe<House_Food_Demand_Bool_Exp>;\n};\n\n/** columns and relationships of \"house\" */\nexport type HouseHouse_Food_Demands_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<House_Food_Demand_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<House_Food_Demand_Order_By>>;\n  where?: InputMaybe<House_Food_Demand_Bool_Exp>;\n};\n\n/** aggregated selection of \"house\" */\nexport type House_Aggregate = {\n  __typename?: 'house_aggregate';\n  aggregate?: Maybe<House_Aggregate_Fields>;\n  nodes: Array<House>;\n};\n\n/** aggregate fields of \"house\" */\nexport type House_Aggregate_Fields = {\n  __typename?: 'house_aggregate_fields';\n  avg?: Maybe<House_Avg_Fields>;\n  count: Scalars['Int'];\n  max?: Maybe<House_Max_Fields>;\n  min?: Maybe<House_Min_Fields>;\n  stddev?: Maybe<House_Stddev_Fields>;\n  stddev_pop?: Maybe<House_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<House_Stddev_Samp_Fields>;\n  sum?: Maybe<House_Sum_Fields>;\n  var_pop?: Maybe<House_Var_Pop_Fields>;\n  var_samp?: Maybe<House_Var_Samp_Fields>;\n  variance?: Maybe<House_Variance_Fields>;\n};\n\n/** aggregate fields of \"house\" */\nexport type House_Aggregate_FieldsCountArgs = {\n  columns?: InputMaybe<Array<House_Select_Column>>;\n  distinct?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"house\" */\nexport type House_Aggregate_Order_By = {\n  avg?: InputMaybe<House_Avg_Order_By>;\n  count?: InputMaybe<Order_By>;\n  max?: InputMaybe<House_Max_Order_By>;\n  min?: InputMaybe<House_Min_Order_By>;\n  stddev?: InputMaybe<House_Stddev_Order_By>;\n  stddev_pop?: InputMaybe<House_Stddev_Pop_Order_By>;\n  stddev_samp?: InputMaybe<House_Stddev_Samp_Order_By>;\n  sum?: InputMaybe<House_Sum_Order_By>;\n  var_pop?: InputMaybe<House_Var_Pop_Order_By>;\n  var_samp?: InputMaybe<House_Var_Samp_Order_By>;\n  variance?: InputMaybe<House_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"house\" */\nexport type House_Arr_Rel_Insert_Input = {\n  data: Array<House_Insert_Input>;\n  /** on conflict condition */\n  on_conflict?: InputMaybe<House_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type House_Avg_Fields = {\n  __typename?: 'house_avg_fields';\n  number?: Maybe<Scalars['Float']>;\n  orient?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"house\" */\nexport type House_Avg_Order_By = {\n  number?: InputMaybe<Order_By>;\n  orient?: InputMaybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"house\". All fields are combined with a logical 'AND'. */\nexport type House_Bool_Exp = {\n  _and?: InputMaybe<Array<House_Bool_Exp>>;\n  _not?: InputMaybe<House_Bool_Exp>;\n  _or?: InputMaybe<Array<House_Bool_Exp>>;\n  boardObjectById?: InputMaybe<Board_Object_Bool_Exp>;\n  board_object?: InputMaybe<Uuid_Comparison_Exp>;\n  game?: InputMaybe<Uuid_Comparison_Exp>;\n  gameByGame?: InputMaybe<Game_Bool_Exp>;\n  has_garden?: InputMaybe<Boolean_Comparison_Exp>;\n  house_food_demands?: InputMaybe<House_Food_Demand_Bool_Exp>;\n  id?: InputMaybe<Uuid_Comparison_Exp>;\n  is_extra?: InputMaybe<Boolean_Comparison_Exp>;\n  number?: InputMaybe<Int_Comparison_Exp>;\n  orient?: InputMaybe<Int_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"house\" */\nexport enum House_Constraint {\n  /** unique or primary key constraint */\n  HousePkey = 'house_pkey',\n}\n\n/** columns and relationships of \"house_food_demand\" */\nexport type House_Food_Demand = {\n  __typename?: 'house_food_demand';\n  food_kind: Scalars['String'];\n  food_quantity: Scalars['Int'];\n  house: Scalars['uuid'];\n  /** An object relationship */\n  houseByHouse: House;\n};\n\n/** aggregated selection of \"house_food_demand\" */\nexport type House_Food_Demand_Aggregate = {\n  __typename?: 'house_food_demand_aggregate';\n  aggregate?: Maybe<House_Food_Demand_Aggregate_Fields>;\n  nodes: Array<House_Food_Demand>;\n};\n\n/** aggregate fields of \"house_food_demand\" */\nexport type House_Food_Demand_Aggregate_Fields = {\n  __typename?: 'house_food_demand_aggregate_fields';\n  avg?: Maybe<House_Food_Demand_Avg_Fields>;\n  count: Scalars['Int'];\n  max?: Maybe<House_Food_Demand_Max_Fields>;\n  min?: Maybe<House_Food_Demand_Min_Fields>;\n  stddev?: Maybe<House_Food_Demand_Stddev_Fields>;\n  stddev_pop?: Maybe<House_Food_Demand_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<House_Food_Demand_Stddev_Samp_Fields>;\n  sum?: Maybe<House_Food_Demand_Sum_Fields>;\n  var_pop?: Maybe<House_Food_Demand_Var_Pop_Fields>;\n  var_samp?: Maybe<House_Food_Demand_Var_Samp_Fields>;\n  variance?: Maybe<House_Food_Demand_Variance_Fields>;\n};\n\n/** aggregate fields of \"house_food_demand\" */\nexport type House_Food_Demand_Aggregate_FieldsCountArgs = {\n  columns?: InputMaybe<Array<House_Food_Demand_Select_Column>>;\n  distinct?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"house_food_demand\" */\nexport type House_Food_Demand_Aggregate_Order_By = {\n  avg?: InputMaybe<House_Food_Demand_Avg_Order_By>;\n  count?: InputMaybe<Order_By>;\n  max?: InputMaybe<House_Food_Demand_Max_Order_By>;\n  min?: InputMaybe<House_Food_Demand_Min_Order_By>;\n  stddev?: InputMaybe<House_Food_Demand_Stddev_Order_By>;\n  stddev_pop?: InputMaybe<House_Food_Demand_Stddev_Pop_Order_By>;\n  stddev_samp?: InputMaybe<House_Food_Demand_Stddev_Samp_Order_By>;\n  sum?: InputMaybe<House_Food_Demand_Sum_Order_By>;\n  var_pop?: InputMaybe<House_Food_Demand_Var_Pop_Order_By>;\n  var_samp?: InputMaybe<House_Food_Demand_Var_Samp_Order_By>;\n  variance?: InputMaybe<House_Food_Demand_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"house_food_demand\" */\nexport type House_Food_Demand_Arr_Rel_Insert_Input = {\n  data: Array<House_Food_Demand_Insert_Input>;\n  /** on conflict condition */\n  on_conflict?: InputMaybe<House_Food_Demand_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type House_Food_Demand_Avg_Fields = {\n  __typename?: 'house_food_demand_avg_fields';\n  food_quantity?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"house_food_demand\" */\nexport type House_Food_Demand_Avg_Order_By = {\n  food_quantity?: InputMaybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"house_food_demand\". All fields are combined with a logical 'AND'. */\nexport type House_Food_Demand_Bool_Exp = {\n  _and?: InputMaybe<Array<House_Food_Demand_Bool_Exp>>;\n  _not?: InputMaybe<House_Food_Demand_Bool_Exp>;\n  _or?: InputMaybe<Array<House_Food_Demand_Bool_Exp>>;\n  food_kind?: InputMaybe<String_Comparison_Exp>;\n  food_quantity?: InputMaybe<Int_Comparison_Exp>;\n  house?: InputMaybe<Uuid_Comparison_Exp>;\n  houseByHouse?: InputMaybe<House_Bool_Exp>;\n};\n\n/** unique or primary key constraints on table \"house_food_demand\" */\nexport enum House_Food_Demand_Constraint {\n  /** unique or primary key constraint */\n  HouseFoodDemandPkey = 'house_food_demand_pkey',\n}\n\n/** input type for incrementing numeric columns in table \"house_food_demand\" */\nexport type House_Food_Demand_Inc_Input = {\n  food_quantity?: InputMaybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"house_food_demand\" */\nexport type House_Food_Demand_Insert_Input = {\n  food_kind?: InputMaybe<Scalars['String']>;\n  food_quantity?: InputMaybe<Scalars['Int']>;\n  house?: InputMaybe<Scalars['uuid']>;\n  houseByHouse?: InputMaybe<House_Obj_Rel_Insert_Input>;\n};\n\n/** aggregate max on columns */\nexport type House_Food_Demand_Max_Fields = {\n  __typename?: 'house_food_demand_max_fields';\n  food_kind?: Maybe<Scalars['String']>;\n  food_quantity?: Maybe<Scalars['Int']>;\n  house?: Maybe<Scalars['uuid']>;\n};\n\n/** order by max() on columns of table \"house_food_demand\" */\nexport type House_Food_Demand_Max_Order_By = {\n  food_kind?: InputMaybe<Order_By>;\n  food_quantity?: InputMaybe<Order_By>;\n  house?: InputMaybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type House_Food_Demand_Min_Fields = {\n  __typename?: 'house_food_demand_min_fields';\n  food_kind?: Maybe<Scalars['String']>;\n  food_quantity?: Maybe<Scalars['Int']>;\n  house?: Maybe<Scalars['uuid']>;\n};\n\n/** order by min() on columns of table \"house_food_demand\" */\nexport type House_Food_Demand_Min_Order_By = {\n  food_kind?: InputMaybe<Order_By>;\n  food_quantity?: InputMaybe<Order_By>;\n  house?: InputMaybe<Order_By>;\n};\n\n/** response of any mutation on the table \"house_food_demand\" */\nexport type House_Food_Demand_Mutation_Response = {\n  __typename?: 'house_food_demand_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<House_Food_Demand>;\n};\n\n/** on conflict condition type for table \"house_food_demand\" */\nexport type House_Food_Demand_On_Conflict = {\n  constraint: House_Food_Demand_Constraint;\n  update_columns?: Array<House_Food_Demand_Update_Column>;\n  where?: InputMaybe<House_Food_Demand_Bool_Exp>;\n};\n\n/** Ordering options when selecting data from \"house_food_demand\". */\nexport type House_Food_Demand_Order_By = {\n  food_kind?: InputMaybe<Order_By>;\n  food_quantity?: InputMaybe<Order_By>;\n  house?: InputMaybe<Order_By>;\n  houseByHouse?: InputMaybe<House_Order_By>;\n};\n\n/** primary key columns input for table: house_food_demand */\nexport type House_Food_Demand_Pk_Columns_Input = {\n  food_kind: Scalars['String'];\n  house: Scalars['uuid'];\n};\n\n/** select columns of table \"house_food_demand\" */\nexport enum House_Food_Demand_Select_Column {\n  /** column name */\n  FoodKind = 'food_kind',\n  /** column name */\n  FoodQuantity = 'food_quantity',\n  /** column name */\n  House = 'house',\n}\n\n/** input type for updating data in table \"house_food_demand\" */\nexport type House_Food_Demand_Set_Input = {\n  food_kind?: InputMaybe<Scalars['String']>;\n  food_quantity?: InputMaybe<Scalars['Int']>;\n  house?: InputMaybe<Scalars['uuid']>;\n};\n\n/** aggregate stddev on columns */\nexport type House_Food_Demand_Stddev_Fields = {\n  __typename?: 'house_food_demand_stddev_fields';\n  food_quantity?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"house_food_demand\" */\nexport type House_Food_Demand_Stddev_Order_By = {\n  food_quantity?: InputMaybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type House_Food_Demand_Stddev_Pop_Fields = {\n  __typename?: 'house_food_demand_stddev_pop_fields';\n  food_quantity?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"house_food_demand\" */\nexport type House_Food_Demand_Stddev_Pop_Order_By = {\n  food_quantity?: InputMaybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type House_Food_Demand_Stddev_Samp_Fields = {\n  __typename?: 'house_food_demand_stddev_samp_fields';\n  food_quantity?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"house_food_demand\" */\nexport type House_Food_Demand_Stddev_Samp_Order_By = {\n  food_quantity?: InputMaybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type House_Food_Demand_Sum_Fields = {\n  __typename?: 'house_food_demand_sum_fields';\n  food_quantity?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"house_food_demand\" */\nexport type House_Food_Demand_Sum_Order_By = {\n  food_quantity?: InputMaybe<Order_By>;\n};\n\n/** update columns of table \"house_food_demand\" */\nexport enum House_Food_Demand_Update_Column {\n  /** column name */\n  FoodKind = 'food_kind',\n  /** column name */\n  FoodQuantity = 'food_quantity',\n  /** column name */\n  House = 'house',\n}\n\n/** aggregate var_pop on columns */\nexport type House_Food_Demand_Var_Pop_Fields = {\n  __typename?: 'house_food_demand_var_pop_fields';\n  food_quantity?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"house_food_demand\" */\nexport type House_Food_Demand_Var_Pop_Order_By = {\n  food_quantity?: InputMaybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type House_Food_Demand_Var_Samp_Fields = {\n  __typename?: 'house_food_demand_var_samp_fields';\n  food_quantity?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"house_food_demand\" */\nexport type House_Food_Demand_Var_Samp_Order_By = {\n  food_quantity?: InputMaybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type House_Food_Demand_Variance_Fields = {\n  __typename?: 'house_food_demand_variance_fields';\n  food_quantity?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"house_food_demand\" */\nexport type House_Food_Demand_Variance_Order_By = {\n  food_quantity?: InputMaybe<Order_By>;\n};\n\n/** input type for incrementing numeric columns in table \"house\" */\nexport type House_Inc_Input = {\n  number?: InputMaybe<Scalars['Int']>;\n  orient?: InputMaybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"house\" */\nexport type House_Insert_Input = {\n  boardObjectById?: InputMaybe<Board_Object_Obj_Rel_Insert_Input>;\n  board_object?: InputMaybe<Scalars['uuid']>;\n  game?: InputMaybe<Scalars['uuid']>;\n  gameByGame?: InputMaybe<Game_Obj_Rel_Insert_Input>;\n  has_garden?: InputMaybe<Scalars['Boolean']>;\n  house_food_demands?: InputMaybe<House_Food_Demand_Arr_Rel_Insert_Input>;\n  id?: InputMaybe<Scalars['uuid']>;\n  is_extra?: InputMaybe<Scalars['Boolean']>;\n  number?: InputMaybe<Scalars['Int']>;\n  orient?: InputMaybe<Scalars['Int']>;\n};\n\n/** aggregate max on columns */\nexport type House_Max_Fields = {\n  __typename?: 'house_max_fields';\n  board_object?: Maybe<Scalars['uuid']>;\n  game?: Maybe<Scalars['uuid']>;\n  id?: Maybe<Scalars['uuid']>;\n  number?: Maybe<Scalars['Int']>;\n  orient?: Maybe<Scalars['Int']>;\n};\n\n/** order by max() on columns of table \"house\" */\nexport type House_Max_Order_By = {\n  board_object?: InputMaybe<Order_By>;\n  game?: InputMaybe<Order_By>;\n  id?: InputMaybe<Order_By>;\n  number?: InputMaybe<Order_By>;\n  orient?: InputMaybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type House_Min_Fields = {\n  __typename?: 'house_min_fields';\n  board_object?: Maybe<Scalars['uuid']>;\n  game?: Maybe<Scalars['uuid']>;\n  id?: Maybe<Scalars['uuid']>;\n  number?: Maybe<Scalars['Int']>;\n  orient?: Maybe<Scalars['Int']>;\n};\n\n/** order by min() on columns of table \"house\" */\nexport type House_Min_Order_By = {\n  board_object?: InputMaybe<Order_By>;\n  game?: InputMaybe<Order_By>;\n  id?: InputMaybe<Order_By>;\n  number?: InputMaybe<Order_By>;\n  orient?: InputMaybe<Order_By>;\n};\n\n/** response of any mutation on the table \"house\" */\nexport type House_Mutation_Response = {\n  __typename?: 'house_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<House>;\n};\n\n/** input type for inserting object relation for remote table \"house\" */\nexport type House_Obj_Rel_Insert_Input = {\n  data: House_Insert_Input;\n  /** on conflict condition */\n  on_conflict?: InputMaybe<House_On_Conflict>;\n};\n\n/** on conflict condition type for table \"house\" */\nexport type House_On_Conflict = {\n  constraint: House_Constraint;\n  update_columns?: Array<House_Update_Column>;\n  where?: InputMaybe<House_Bool_Exp>;\n};\n\n/** Ordering options when selecting data from \"house\". */\nexport type House_Order_By = {\n  boardObjectById?: InputMaybe<Board_Object_Order_By>;\n  board_object?: InputMaybe<Order_By>;\n  game?: InputMaybe<Order_By>;\n  gameByGame?: InputMaybe<Game_Order_By>;\n  has_garden?: InputMaybe<Order_By>;\n  house_food_demands_aggregate?: InputMaybe<House_Food_Demand_Aggregate_Order_By>;\n  id?: InputMaybe<Order_By>;\n  is_extra?: InputMaybe<Order_By>;\n  number?: InputMaybe<Order_By>;\n  orient?: InputMaybe<Order_By>;\n};\n\n/** primary key columns input for table: house */\nexport type House_Pk_Columns_Input = {\n  id: Scalars['uuid'];\n};\n\n/** select columns of table \"house\" */\nexport enum House_Select_Column {\n  /** column name */\n  BoardObject = 'board_object',\n  /** column name */\n  Game = 'game',\n  /** column name */\n  HasGarden = 'has_garden',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  IsExtra = 'is_extra',\n  /** column name */\n  Number = 'number',\n  /** column name */\n  Orient = 'orient',\n}\n\n/** input type for updating data in table \"house\" */\nexport type House_Set_Input = {\n  board_object?: InputMaybe<Scalars['uuid']>;\n  game?: InputMaybe<Scalars['uuid']>;\n  has_garden?: InputMaybe<Scalars['Boolean']>;\n  id?: InputMaybe<Scalars['uuid']>;\n  is_extra?: InputMaybe<Scalars['Boolean']>;\n  number?: InputMaybe<Scalars['Int']>;\n  orient?: InputMaybe<Scalars['Int']>;\n};\n\n/** aggregate stddev on columns */\nexport type House_Stddev_Fields = {\n  __typename?: 'house_stddev_fields';\n  number?: Maybe<Scalars['Float']>;\n  orient?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"house\" */\nexport type House_Stddev_Order_By = {\n  number?: InputMaybe<Order_By>;\n  orient?: InputMaybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type House_Stddev_Pop_Fields = {\n  __typename?: 'house_stddev_pop_fields';\n  number?: Maybe<Scalars['Float']>;\n  orient?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"house\" */\nexport type House_Stddev_Pop_Order_By = {\n  number?: InputMaybe<Order_By>;\n  orient?: InputMaybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type House_Stddev_Samp_Fields = {\n  __typename?: 'house_stddev_samp_fields';\n  number?: Maybe<Scalars['Float']>;\n  orient?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"house\" */\nexport type House_Stddev_Samp_Order_By = {\n  number?: InputMaybe<Order_By>;\n  orient?: InputMaybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type House_Sum_Fields = {\n  __typename?: 'house_sum_fields';\n  number?: Maybe<Scalars['Int']>;\n  orient?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"house\" */\nexport type House_Sum_Order_By = {\n  number?: InputMaybe<Order_By>;\n  orient?: InputMaybe<Order_By>;\n};\n\n/** update columns of table \"house\" */\nexport enum House_Update_Column {\n  /** column name */\n  BoardObject = 'board_object',\n  /** column name */\n  Game = 'game',\n  /** column name */\n  HasGarden = 'has_garden',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  IsExtra = 'is_extra',\n  /** column name */\n  Number = 'number',\n  /** column name */\n  Orient = 'orient',\n}\n\n/** aggregate var_pop on columns */\nexport type House_Var_Pop_Fields = {\n  __typename?: 'house_var_pop_fields';\n  number?: Maybe<Scalars['Float']>;\n  orient?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"house\" */\nexport type House_Var_Pop_Order_By = {\n  number?: InputMaybe<Order_By>;\n  orient?: InputMaybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type House_Var_Samp_Fields = {\n  __typename?: 'house_var_samp_fields';\n  number?: Maybe<Scalars['Float']>;\n  orient?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"house\" */\nexport type House_Var_Samp_Order_By = {\n  number?: InputMaybe<Order_By>;\n  orient?: InputMaybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type House_Variance_Fields = {\n  __typename?: 'house_variance_fields';\n  number?: Maybe<Scalars['Float']>;\n  orient?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"house\" */\nexport type House_Variance_Order_By = {\n  number?: InputMaybe<Order_By>;\n  orient?: InputMaybe<Order_By>;\n};\n\n/** mutation root */\nexport type Mutation_Root = {\n  __typename?: 'mutation_root';\n  /** delete data from the table: \"advert\" */\n  delete_advert?: Maybe<Advert_Mutation_Response>;\n  /** delete single row from the table: \"advert\" */\n  delete_advert_by_pk?: Maybe<Advert>;\n  /** delete data from the table: \"board_object\" */\n  delete_board_object?: Maybe<Board_Object_Mutation_Response>;\n  /** delete single row from the table: \"board_object\" */\n  delete_board_object_by_pk?: Maybe<Board_Object>;\n  /** delete data from the table: \"diner\" */\n  delete_diner?: Maybe<Diner_Mutation_Response>;\n  /** delete single row from the table: \"diner\" */\n  delete_diner_by_pk?: Maybe<Diner>;\n  /** delete data from the table: \"drink\" */\n  delete_drink?: Maybe<Drink_Mutation_Response>;\n  /** delete single row from the table: \"drink\" */\n  delete_drink_by_pk?: Maybe<Drink>;\n  /** delete data from the table: \"employee\" */\n  delete_employee?: Maybe<Employee_Mutation_Response>;\n  /** delete single row from the table: \"employee\" */\n  delete_employee_by_pk?: Maybe<Employee>;\n  /** delete data from the table: \"game\" */\n  delete_game?: Maybe<Game_Mutation_Response>;\n  /** delete single row from the table: \"game\" */\n  delete_game_by_pk?: Maybe<Game>;\n  /** delete data from the table: \"garden\" */\n  delete_garden?: Maybe<Garden_Mutation_Response>;\n  /** delete single row from the table: \"garden\" */\n  delete_garden_by_pk?: Maybe<Garden>;\n  /** delete data from the table: \"house\" */\n  delete_house?: Maybe<House_Mutation_Response>;\n  /** delete single row from the table: \"house\" */\n  delete_house_by_pk?: Maybe<House>;\n  /** delete data from the table: \"house_food_demand\" */\n  delete_house_food_demand?: Maybe<House_Food_Demand_Mutation_Response>;\n  /** delete single row from the table: \"house_food_demand\" */\n  delete_house_food_demand_by_pk?: Maybe<House_Food_Demand>;\n  /** delete data from the table: \"player\" */\n  delete_player?: Maybe<Player_Mutation_Response>;\n  /** delete single row from the table: \"player\" */\n  delete_player_by_pk?: Maybe<Player>;\n  /** delete data from the table: \"player_food\" */\n  delete_player_food?: Maybe<Player_Food_Mutation_Response>;\n  /** delete single row from the table: \"player_food\" */\n  delete_player_food_by_pk?: Maybe<Player_Food>;\n  /** delete data from the table: \"road\" */\n  delete_road?: Maybe<Road_Mutation_Response>;\n  /** delete single row from the table: \"road\" */\n  delete_road_by_pk?: Maybe<Road>;\n  /** delete data from the table: \"road_connection\" */\n  delete_road_connection?: Maybe<Road_Connection_Mutation_Response>;\n  /** delete single row from the table: \"road_connection\" */\n  delete_road_connection_by_pk?: Maybe<Road_Connection>;\n  /** delete data from the table: \"user_info\" */\n  delete_user_info?: Maybe<User_Info_Mutation_Response>;\n  /** delete single row from the table: \"user_info\" */\n  delete_user_info_by_pk?: Maybe<User_Info>;\n  /** delete data from the table: \"user_me\" */\n  delete_user_me?: Maybe<User_Me_Mutation_Response>;\n  /** insert data into the table: \"advert\" */\n  insert_advert?: Maybe<Advert_Mutation_Response>;\n  /** insert a single row into the table: \"advert\" */\n  insert_advert_one?: Maybe<Advert>;\n  /** insert data into the table: \"board_object\" */\n  insert_board_object?: Maybe<Board_Object_Mutation_Response>;\n  /** insert a single row into the table: \"board_object\" */\n  insert_board_object_one?: Maybe<Board_Object>;\n  /** insert data into the table: \"diner\" */\n  insert_diner?: Maybe<Diner_Mutation_Response>;\n  /** insert a single row into the table: \"diner\" */\n  insert_diner_one?: Maybe<Diner>;\n  /** insert data into the table: \"drink\" */\n  insert_drink?: Maybe<Drink_Mutation_Response>;\n  /** insert a single row into the table: \"drink\" */\n  insert_drink_one?: Maybe<Drink>;\n  /** insert data into the table: \"employee\" */\n  insert_employee?: Maybe<Employee_Mutation_Response>;\n  /** insert a single row into the table: \"employee\" */\n  insert_employee_one?: Maybe<Employee>;\n  /** insert data into the table: \"game\" */\n  insert_game?: Maybe<Game_Mutation_Response>;\n  /** insert a single row into the table: \"game\" */\n  insert_game_one?: Maybe<Game>;\n  /** insert data into the table: \"garden\" */\n  insert_garden?: Maybe<Garden_Mutation_Response>;\n  /** insert a single row into the table: \"garden\" */\n  insert_garden_one?: Maybe<Garden>;\n  /** insert data into the table: \"house\" */\n  insert_house?: Maybe<House_Mutation_Response>;\n  /** insert data into the table: \"house_food_demand\" */\n  insert_house_food_demand?: Maybe<House_Food_Demand_Mutation_Response>;\n  /** insert a single row into the table: \"house_food_demand\" */\n  insert_house_food_demand_one?: Maybe<House_Food_Demand>;\n  /** insert a single row into the table: \"house\" */\n  insert_house_one?: Maybe<House>;\n  /** insert data into the table: \"player\" */\n  insert_player?: Maybe<Player_Mutation_Response>;\n  /** insert data into the table: \"player_food\" */\n  insert_player_food?: Maybe<Player_Food_Mutation_Response>;\n  /** insert a single row into the table: \"player_food\" */\n  insert_player_food_one?: Maybe<Player_Food>;\n  /** insert a single row into the table: \"player\" */\n  insert_player_one?: Maybe<Player>;\n  /** insert data into the table: \"road\" */\n  insert_road?: Maybe<Road_Mutation_Response>;\n  /** insert data into the table: \"road_connection\" */\n  insert_road_connection?: Maybe<Road_Connection_Mutation_Response>;\n  /** insert a single row into the table: \"road_connection\" */\n  insert_road_connection_one?: Maybe<Road_Connection>;\n  /** insert a single row into the table: \"road\" */\n  insert_road_one?: Maybe<Road>;\n  /** insert data into the table: \"user_info\" */\n  insert_user_info?: Maybe<User_Info_Mutation_Response>;\n  /** insert a single row into the table: \"user_info\" */\n  insert_user_info_one?: Maybe<User_Info>;\n  /** insert data into the table: \"user_me\" */\n  insert_user_me?: Maybe<User_Me_Mutation_Response>;\n  /** insert a single row into the table: \"user_me\" */\n  insert_user_me_one?: Maybe<User_Me>;\n  /** update data of the table: \"advert\" */\n  update_advert?: Maybe<Advert_Mutation_Response>;\n  /** update single row of the table: \"advert\" */\n  update_advert_by_pk?: Maybe<Advert>;\n  /** update data of the table: \"board_object\" */\n  update_board_object?: Maybe<Board_Object_Mutation_Response>;\n  /** update single row of the table: \"board_object\" */\n  update_board_object_by_pk?: Maybe<Board_Object>;\n  /** update data of the table: \"diner\" */\n  update_diner?: Maybe<Diner_Mutation_Response>;\n  /** update single row of the table: \"diner\" */\n  update_diner_by_pk?: Maybe<Diner>;\n  /** update data of the table: \"drink\" */\n  update_drink?: Maybe<Drink_Mutation_Response>;\n  /** update single row of the table: \"drink\" */\n  update_drink_by_pk?: Maybe<Drink>;\n  /** update data of the table: \"employee\" */\n  update_employee?: Maybe<Employee_Mutation_Response>;\n  /** update single row of the table: \"employee\" */\n  update_employee_by_pk?: Maybe<Employee>;\n  /** update data of the table: \"game\" */\n  update_game?: Maybe<Game_Mutation_Response>;\n  /** update single row of the table: \"game\" */\n  update_game_by_pk?: Maybe<Game>;\n  /** update data of the table: \"garden\" */\n  update_garden?: Maybe<Garden_Mutation_Response>;\n  /** update single row of the table: \"garden\" */\n  update_garden_by_pk?: Maybe<Garden>;\n  /** update data of the table: \"house\" */\n  update_house?: Maybe<House_Mutation_Response>;\n  /** update single row of the table: \"house\" */\n  update_house_by_pk?: Maybe<House>;\n  /** update data of the table: \"house_food_demand\" */\n  update_house_food_demand?: Maybe<House_Food_Demand_Mutation_Response>;\n  /** update single row of the table: \"house_food_demand\" */\n  update_house_food_demand_by_pk?: Maybe<House_Food_Demand>;\n  /** update data of the table: \"player\" */\n  update_player?: Maybe<Player_Mutation_Response>;\n  /** update single row of the table: \"player\" */\n  update_player_by_pk?: Maybe<Player>;\n  /** update data of the table: \"player_food\" */\n  update_player_food?: Maybe<Player_Food_Mutation_Response>;\n  /** update single row of the table: \"player_food\" */\n  update_player_food_by_pk?: Maybe<Player_Food>;\n  /** update data of the table: \"road\" */\n  update_road?: Maybe<Road_Mutation_Response>;\n  /** update single row of the table: \"road\" */\n  update_road_by_pk?: Maybe<Road>;\n  /** update data of the table: \"road_connection\" */\n  update_road_connection?: Maybe<Road_Connection_Mutation_Response>;\n  /** update single row of the table: \"road_connection\" */\n  update_road_connection_by_pk?: Maybe<Road_Connection>;\n  /** update data of the table: \"user_info\" */\n  update_user_info?: Maybe<User_Info_Mutation_Response>;\n  /** update single row of the table: \"user_info\" */\n  update_user_info_by_pk?: Maybe<User_Info>;\n  /** update data of the table: \"user_me\" */\n  update_user_me?: Maybe<User_Me_Mutation_Response>;\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_AdvertArgs = {\n  where: Advert_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_Advert_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_Board_ObjectArgs = {\n  where: Board_Object_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_Board_Object_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_DinerArgs = {\n  where: Diner_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_Diner_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_DrinkArgs = {\n  where: Drink_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_Drink_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_EmployeeArgs = {\n  where: Employee_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_Employee_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_GameArgs = {\n  where: Game_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_Game_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_GardenArgs = {\n  where: Garden_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_Garden_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_HouseArgs = {\n  where: House_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_House_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_House_Food_DemandArgs = {\n  where: House_Food_Demand_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_House_Food_Demand_By_PkArgs = {\n  food_kind: Scalars['String'];\n  house: Scalars['uuid'];\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_PlayerArgs = {\n  where: Player_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_Player_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_Player_FoodArgs = {\n  where: Player_Food_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_Player_Food_By_PkArgs = {\n  food_kind: Scalars['String'];\n  player: Scalars['uuid'];\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_RoadArgs = {\n  where: Road_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_Road_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_Road_ConnectionArgs = {\n  where: Road_Connection_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_Road_Connection_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_User_InfoArgs = {\n  where: User_Info_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_User_Info_By_PkArgs = {\n  id: Scalars['String'];\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_User_MeArgs = {\n  where: User_Me_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_AdvertArgs = {\n  objects: Array<Advert_Insert_Input>;\n  on_conflict?: InputMaybe<Advert_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_Advert_OneArgs = {\n  object: Advert_Insert_Input;\n  on_conflict?: InputMaybe<Advert_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_Board_ObjectArgs = {\n  objects: Array<Board_Object_Insert_Input>;\n  on_conflict?: InputMaybe<Board_Object_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_Board_Object_OneArgs = {\n  object: Board_Object_Insert_Input;\n  on_conflict?: InputMaybe<Board_Object_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_DinerArgs = {\n  objects: Array<Diner_Insert_Input>;\n  on_conflict?: InputMaybe<Diner_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_Diner_OneArgs = {\n  object: Diner_Insert_Input;\n  on_conflict?: InputMaybe<Diner_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_DrinkArgs = {\n  objects: Array<Drink_Insert_Input>;\n  on_conflict?: InputMaybe<Drink_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_Drink_OneArgs = {\n  object: Drink_Insert_Input;\n  on_conflict?: InputMaybe<Drink_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_EmployeeArgs = {\n  objects: Array<Employee_Insert_Input>;\n  on_conflict?: InputMaybe<Employee_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_Employee_OneArgs = {\n  object: Employee_Insert_Input;\n  on_conflict?: InputMaybe<Employee_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_GameArgs = {\n  objects: Array<Game_Insert_Input>;\n  on_conflict?: InputMaybe<Game_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_Game_OneArgs = {\n  object: Game_Insert_Input;\n  on_conflict?: InputMaybe<Game_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_GardenArgs = {\n  objects: Array<Garden_Insert_Input>;\n  on_conflict?: InputMaybe<Garden_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_Garden_OneArgs = {\n  object: Garden_Insert_Input;\n  on_conflict?: InputMaybe<Garden_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_HouseArgs = {\n  objects: Array<House_Insert_Input>;\n  on_conflict?: InputMaybe<House_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_House_Food_DemandArgs = {\n  objects: Array<House_Food_Demand_Insert_Input>;\n  on_conflict?: InputMaybe<House_Food_Demand_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_House_Food_Demand_OneArgs = {\n  object: House_Food_Demand_Insert_Input;\n  on_conflict?: InputMaybe<House_Food_Demand_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_House_OneArgs = {\n  object: House_Insert_Input;\n  on_conflict?: InputMaybe<House_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_PlayerArgs = {\n  objects: Array<Player_Insert_Input>;\n  on_conflict?: InputMaybe<Player_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_Player_FoodArgs = {\n  objects: Array<Player_Food_Insert_Input>;\n  on_conflict?: InputMaybe<Player_Food_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_Player_Food_OneArgs = {\n  object: Player_Food_Insert_Input;\n  on_conflict?: InputMaybe<Player_Food_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_Player_OneArgs = {\n  object: Player_Insert_Input;\n  on_conflict?: InputMaybe<Player_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_RoadArgs = {\n  objects: Array<Road_Insert_Input>;\n  on_conflict?: InputMaybe<Road_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_Road_ConnectionArgs = {\n  objects: Array<Road_Connection_Insert_Input>;\n  on_conflict?: InputMaybe<Road_Connection_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_Road_Connection_OneArgs = {\n  object: Road_Connection_Insert_Input;\n  on_conflict?: InputMaybe<Road_Connection_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_Road_OneArgs = {\n  object: Road_Insert_Input;\n  on_conflict?: InputMaybe<Road_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_User_InfoArgs = {\n  objects: Array<User_Info_Insert_Input>;\n  on_conflict?: InputMaybe<User_Info_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_User_Info_OneArgs = {\n  object: User_Info_Insert_Input;\n  on_conflict?: InputMaybe<User_Info_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_User_MeArgs = {\n  objects: Array<User_Me_Insert_Input>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_User_Me_OneArgs = {\n  object: User_Me_Insert_Input;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_AdvertArgs = {\n  _inc?: InputMaybe<Advert_Inc_Input>;\n  _set?: InputMaybe<Advert_Set_Input>;\n  where: Advert_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_Advert_By_PkArgs = {\n  _inc?: InputMaybe<Advert_Inc_Input>;\n  _set?: InputMaybe<Advert_Set_Input>;\n  pk_columns: Advert_Pk_Columns_Input;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_Board_ObjectArgs = {\n  _inc?: InputMaybe<Board_Object_Inc_Input>;\n  _set?: InputMaybe<Board_Object_Set_Input>;\n  where: Board_Object_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_Board_Object_By_PkArgs = {\n  _inc?: InputMaybe<Board_Object_Inc_Input>;\n  _set?: InputMaybe<Board_Object_Set_Input>;\n  pk_columns: Board_Object_Pk_Columns_Input;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_DinerArgs = {\n  _set?: InputMaybe<Diner_Set_Input>;\n  where: Diner_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_Diner_By_PkArgs = {\n  _set?: InputMaybe<Diner_Set_Input>;\n  pk_columns: Diner_Pk_Columns_Input;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_DrinkArgs = {\n  _set?: InputMaybe<Drink_Set_Input>;\n  where: Drink_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_Drink_By_PkArgs = {\n  _set?: InputMaybe<Drink_Set_Input>;\n  pk_columns: Drink_Pk_Columns_Input;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_EmployeeArgs = {\n  _inc?: InputMaybe<Employee_Inc_Input>;\n  _set?: InputMaybe<Employee_Set_Input>;\n  where: Employee_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_Employee_By_PkArgs = {\n  _inc?: InputMaybe<Employee_Inc_Input>;\n  _set?: InputMaybe<Employee_Set_Input>;\n  pk_columns: Employee_Pk_Columns_Input;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_GameArgs = {\n  _set?: InputMaybe<Game_Set_Input>;\n  where: Game_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_Game_By_PkArgs = {\n  _set?: InputMaybe<Game_Set_Input>;\n  pk_columns: Game_Pk_Columns_Input;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_GardenArgs = {\n  _set?: InputMaybe<Garden_Set_Input>;\n  where: Garden_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_Garden_By_PkArgs = {\n  _set?: InputMaybe<Garden_Set_Input>;\n  pk_columns: Garden_Pk_Columns_Input;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_HouseArgs = {\n  _inc?: InputMaybe<House_Inc_Input>;\n  _set?: InputMaybe<House_Set_Input>;\n  where: House_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_House_By_PkArgs = {\n  _inc?: InputMaybe<House_Inc_Input>;\n  _set?: InputMaybe<House_Set_Input>;\n  pk_columns: House_Pk_Columns_Input;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_House_Food_DemandArgs = {\n  _inc?: InputMaybe<House_Food_Demand_Inc_Input>;\n  _set?: InputMaybe<House_Food_Demand_Set_Input>;\n  where: House_Food_Demand_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_House_Food_Demand_By_PkArgs = {\n  _inc?: InputMaybe<House_Food_Demand_Inc_Input>;\n  _set?: InputMaybe<House_Food_Demand_Set_Input>;\n  pk_columns: House_Food_Demand_Pk_Columns_Input;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_PlayerArgs = {\n  _inc?: InputMaybe<Player_Inc_Input>;\n  _set?: InputMaybe<Player_Set_Input>;\n  where: Player_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_Player_By_PkArgs = {\n  _inc?: InputMaybe<Player_Inc_Input>;\n  _set?: InputMaybe<Player_Set_Input>;\n  pk_columns: Player_Pk_Columns_Input;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_Player_FoodArgs = {\n  _inc?: InputMaybe<Player_Food_Inc_Input>;\n  _set?: InputMaybe<Player_Food_Set_Input>;\n  where: Player_Food_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_Player_Food_By_PkArgs = {\n  _inc?: InputMaybe<Player_Food_Inc_Input>;\n  _set?: InputMaybe<Player_Food_Set_Input>;\n  pk_columns: Player_Food_Pk_Columns_Input;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_RoadArgs = {\n  _set?: InputMaybe<Road_Set_Input>;\n  where: Road_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_Road_By_PkArgs = {\n  _set?: InputMaybe<Road_Set_Input>;\n  pk_columns: Road_Pk_Columns_Input;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_Road_ConnectionArgs = {\n  _inc?: InputMaybe<Road_Connection_Inc_Input>;\n  _set?: InputMaybe<Road_Connection_Set_Input>;\n  where: Road_Connection_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_Road_Connection_By_PkArgs = {\n  _inc?: InputMaybe<Road_Connection_Inc_Input>;\n  _set?: InputMaybe<Road_Connection_Set_Input>;\n  pk_columns: Road_Connection_Pk_Columns_Input;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_User_InfoArgs = {\n  _set?: InputMaybe<User_Info_Set_Input>;\n  where: User_Info_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_User_Info_By_PkArgs = {\n  _set?: InputMaybe<User_Info_Set_Input>;\n  pk_columns: User_Info_Pk_Columns_Input;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_User_MeArgs = {\n  _set?: InputMaybe<User_Me_Set_Input>;\n  where: User_Me_Bool_Exp;\n};\n\n/** column ordering options */\nexport enum Order_By {\n  /** in ascending order, nulls last */\n  Asc = 'asc',\n  /** in ascending order, nulls first */\n  AscNullsFirst = 'asc_nulls_first',\n  /** in ascending order, nulls last */\n  AscNullsLast = 'asc_nulls_last',\n  /** in descending order, nulls first */\n  Desc = 'desc',\n  /** in descending order, nulls first */\n  DescNullsFirst = 'desc_nulls_first',\n  /** in descending order, nulls last */\n  DescNullsLast = 'desc_nulls_last',\n}\n\n/** columns and relationships of \"player\" */\nexport type Player = {\n  __typename?: 'player';\n  cash?: Maybe<Scalars['Int']>;\n  colour?: Maybe<Scalars['String']>;\n  /** An array relationship */\n  diners: Array<Diner>;\n  /** An aggregate relationship */\n  diners_aggregate: Diner_Aggregate;\n  game: Scalars['uuid'];\n  /** An object relationship */\n  gameByGame: Game;\n  id: Scalars['uuid'];\n  name: Scalars['String'];\n  /** An array relationship */\n  player_foods: Array<Player_Food>;\n  /** An aggregate relationship */\n  player_foods_aggregate: Player_Food_Aggregate;\n};\n\n/** columns and relationships of \"player\" */\nexport type PlayerDinersArgs = {\n  distinct_on?: InputMaybe<Array<Diner_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Diner_Order_By>>;\n  where?: InputMaybe<Diner_Bool_Exp>;\n};\n\n/** columns and relationships of \"player\" */\nexport type PlayerDiners_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Diner_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Diner_Order_By>>;\n  where?: InputMaybe<Diner_Bool_Exp>;\n};\n\n/** columns and relationships of \"player\" */\nexport type PlayerPlayer_FoodsArgs = {\n  distinct_on?: InputMaybe<Array<Player_Food_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Player_Food_Order_By>>;\n  where?: InputMaybe<Player_Food_Bool_Exp>;\n};\n\n/** columns and relationships of \"player\" */\nexport type PlayerPlayer_Foods_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Player_Food_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Player_Food_Order_By>>;\n  where?: InputMaybe<Player_Food_Bool_Exp>;\n};\n\n/** aggregated selection of \"player\" */\nexport type Player_Aggregate = {\n  __typename?: 'player_aggregate';\n  aggregate?: Maybe<Player_Aggregate_Fields>;\n  nodes: Array<Player>;\n};\n\n/** aggregate fields of \"player\" */\nexport type Player_Aggregate_Fields = {\n  __typename?: 'player_aggregate_fields';\n  avg?: Maybe<Player_Avg_Fields>;\n  count: Scalars['Int'];\n  max?: Maybe<Player_Max_Fields>;\n  min?: Maybe<Player_Min_Fields>;\n  stddev?: Maybe<Player_Stddev_Fields>;\n  stddev_pop?: Maybe<Player_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Player_Stddev_Samp_Fields>;\n  sum?: Maybe<Player_Sum_Fields>;\n  var_pop?: Maybe<Player_Var_Pop_Fields>;\n  var_samp?: Maybe<Player_Var_Samp_Fields>;\n  variance?: Maybe<Player_Variance_Fields>;\n};\n\n/** aggregate fields of \"player\" */\nexport type Player_Aggregate_FieldsCountArgs = {\n  columns?: InputMaybe<Array<Player_Select_Column>>;\n  distinct?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"player\" */\nexport type Player_Aggregate_Order_By = {\n  avg?: InputMaybe<Player_Avg_Order_By>;\n  count?: InputMaybe<Order_By>;\n  max?: InputMaybe<Player_Max_Order_By>;\n  min?: InputMaybe<Player_Min_Order_By>;\n  stddev?: InputMaybe<Player_Stddev_Order_By>;\n  stddev_pop?: InputMaybe<Player_Stddev_Pop_Order_By>;\n  stddev_samp?: InputMaybe<Player_Stddev_Samp_Order_By>;\n  sum?: InputMaybe<Player_Sum_Order_By>;\n  var_pop?: InputMaybe<Player_Var_Pop_Order_By>;\n  var_samp?: InputMaybe<Player_Var_Samp_Order_By>;\n  variance?: InputMaybe<Player_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"player\" */\nexport type Player_Arr_Rel_Insert_Input = {\n  data: Array<Player_Insert_Input>;\n  /** on conflict condition */\n  on_conflict?: InputMaybe<Player_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Player_Avg_Fields = {\n  __typename?: 'player_avg_fields';\n  cash?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"player\" */\nexport type Player_Avg_Order_By = {\n  cash?: InputMaybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"player\". All fields are combined with a logical 'AND'. */\nexport type Player_Bool_Exp = {\n  _and?: InputMaybe<Array<Player_Bool_Exp>>;\n  _not?: InputMaybe<Player_Bool_Exp>;\n  _or?: InputMaybe<Array<Player_Bool_Exp>>;\n  cash?: InputMaybe<Int_Comparison_Exp>;\n  colour?: InputMaybe<String_Comparison_Exp>;\n  diners?: InputMaybe<Diner_Bool_Exp>;\n  game?: InputMaybe<Uuid_Comparison_Exp>;\n  gameByGame?: InputMaybe<Game_Bool_Exp>;\n  id?: InputMaybe<Uuid_Comparison_Exp>;\n  name?: InputMaybe<String_Comparison_Exp>;\n  player_foods?: InputMaybe<Player_Food_Bool_Exp>;\n};\n\n/** unique or primary key constraints on table \"player\" */\nexport enum Player_Constraint {\n  /** unique or primary key constraint */\n  PlayerPkey = 'player_pkey',\n}\n\n/** columns and relationships of \"player_food\" */\nexport type Player_Food = {\n  __typename?: 'player_food';\n  food_kind: Scalars['String'];\n  food_quantity: Scalars['Int'];\n  player: Scalars['uuid'];\n  /** An object relationship */\n  playerByPlayer: Player;\n};\n\n/** aggregated selection of \"player_food\" */\nexport type Player_Food_Aggregate = {\n  __typename?: 'player_food_aggregate';\n  aggregate?: Maybe<Player_Food_Aggregate_Fields>;\n  nodes: Array<Player_Food>;\n};\n\n/** aggregate fields of \"player_food\" */\nexport type Player_Food_Aggregate_Fields = {\n  __typename?: 'player_food_aggregate_fields';\n  avg?: Maybe<Player_Food_Avg_Fields>;\n  count: Scalars['Int'];\n  max?: Maybe<Player_Food_Max_Fields>;\n  min?: Maybe<Player_Food_Min_Fields>;\n  stddev?: Maybe<Player_Food_Stddev_Fields>;\n  stddev_pop?: Maybe<Player_Food_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Player_Food_Stddev_Samp_Fields>;\n  sum?: Maybe<Player_Food_Sum_Fields>;\n  var_pop?: Maybe<Player_Food_Var_Pop_Fields>;\n  var_samp?: Maybe<Player_Food_Var_Samp_Fields>;\n  variance?: Maybe<Player_Food_Variance_Fields>;\n};\n\n/** aggregate fields of \"player_food\" */\nexport type Player_Food_Aggregate_FieldsCountArgs = {\n  columns?: InputMaybe<Array<Player_Food_Select_Column>>;\n  distinct?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"player_food\" */\nexport type Player_Food_Aggregate_Order_By = {\n  avg?: InputMaybe<Player_Food_Avg_Order_By>;\n  count?: InputMaybe<Order_By>;\n  max?: InputMaybe<Player_Food_Max_Order_By>;\n  min?: InputMaybe<Player_Food_Min_Order_By>;\n  stddev?: InputMaybe<Player_Food_Stddev_Order_By>;\n  stddev_pop?: InputMaybe<Player_Food_Stddev_Pop_Order_By>;\n  stddev_samp?: InputMaybe<Player_Food_Stddev_Samp_Order_By>;\n  sum?: InputMaybe<Player_Food_Sum_Order_By>;\n  var_pop?: InputMaybe<Player_Food_Var_Pop_Order_By>;\n  var_samp?: InputMaybe<Player_Food_Var_Samp_Order_By>;\n  variance?: InputMaybe<Player_Food_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"player_food\" */\nexport type Player_Food_Arr_Rel_Insert_Input = {\n  data: Array<Player_Food_Insert_Input>;\n  /** on conflict condition */\n  on_conflict?: InputMaybe<Player_Food_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Player_Food_Avg_Fields = {\n  __typename?: 'player_food_avg_fields';\n  food_quantity?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"player_food\" */\nexport type Player_Food_Avg_Order_By = {\n  food_quantity?: InputMaybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"player_food\". All fields are combined with a logical 'AND'. */\nexport type Player_Food_Bool_Exp = {\n  _and?: InputMaybe<Array<Player_Food_Bool_Exp>>;\n  _not?: InputMaybe<Player_Food_Bool_Exp>;\n  _or?: InputMaybe<Array<Player_Food_Bool_Exp>>;\n  food_kind?: InputMaybe<String_Comparison_Exp>;\n  food_quantity?: InputMaybe<Int_Comparison_Exp>;\n  player?: InputMaybe<Uuid_Comparison_Exp>;\n  playerByPlayer?: InputMaybe<Player_Bool_Exp>;\n};\n\n/** unique or primary key constraints on table \"player_food\" */\nexport enum Player_Food_Constraint {\n  /** unique or primary key constraint */\n  PlayerFoodPkey = 'player_food_pkey',\n}\n\n/** input type for incrementing numeric columns in table \"player_food\" */\nexport type Player_Food_Inc_Input = {\n  food_quantity?: InputMaybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"player_food\" */\nexport type Player_Food_Insert_Input = {\n  food_kind?: InputMaybe<Scalars['String']>;\n  food_quantity?: InputMaybe<Scalars['Int']>;\n  player?: InputMaybe<Scalars['uuid']>;\n  playerByPlayer?: InputMaybe<Player_Obj_Rel_Insert_Input>;\n};\n\n/** aggregate max on columns */\nexport type Player_Food_Max_Fields = {\n  __typename?: 'player_food_max_fields';\n  food_kind?: Maybe<Scalars['String']>;\n  food_quantity?: Maybe<Scalars['Int']>;\n  player?: Maybe<Scalars['uuid']>;\n};\n\n/** order by max() on columns of table \"player_food\" */\nexport type Player_Food_Max_Order_By = {\n  food_kind?: InputMaybe<Order_By>;\n  food_quantity?: InputMaybe<Order_By>;\n  player?: InputMaybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Player_Food_Min_Fields = {\n  __typename?: 'player_food_min_fields';\n  food_kind?: Maybe<Scalars['String']>;\n  food_quantity?: Maybe<Scalars['Int']>;\n  player?: Maybe<Scalars['uuid']>;\n};\n\n/** order by min() on columns of table \"player_food\" */\nexport type Player_Food_Min_Order_By = {\n  food_kind?: InputMaybe<Order_By>;\n  food_quantity?: InputMaybe<Order_By>;\n  player?: InputMaybe<Order_By>;\n};\n\n/** response of any mutation on the table \"player_food\" */\nexport type Player_Food_Mutation_Response = {\n  __typename?: 'player_food_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<Player_Food>;\n};\n\n/** on conflict condition type for table \"player_food\" */\nexport type Player_Food_On_Conflict = {\n  constraint: Player_Food_Constraint;\n  update_columns?: Array<Player_Food_Update_Column>;\n  where?: InputMaybe<Player_Food_Bool_Exp>;\n};\n\n/** Ordering options when selecting data from \"player_food\". */\nexport type Player_Food_Order_By = {\n  food_kind?: InputMaybe<Order_By>;\n  food_quantity?: InputMaybe<Order_By>;\n  player?: InputMaybe<Order_By>;\n  playerByPlayer?: InputMaybe<Player_Order_By>;\n};\n\n/** primary key columns input for table: player_food */\nexport type Player_Food_Pk_Columns_Input = {\n  food_kind: Scalars['String'];\n  player: Scalars['uuid'];\n};\n\n/** select columns of table \"player_food\" */\nexport enum Player_Food_Select_Column {\n  /** column name */\n  FoodKind = 'food_kind',\n  /** column name */\n  FoodQuantity = 'food_quantity',\n  /** column name */\n  Player = 'player',\n}\n\n/** input type for updating data in table \"player_food\" */\nexport type Player_Food_Set_Input = {\n  food_kind?: InputMaybe<Scalars['String']>;\n  food_quantity?: InputMaybe<Scalars['Int']>;\n  player?: InputMaybe<Scalars['uuid']>;\n};\n\n/** aggregate stddev on columns */\nexport type Player_Food_Stddev_Fields = {\n  __typename?: 'player_food_stddev_fields';\n  food_quantity?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"player_food\" */\nexport type Player_Food_Stddev_Order_By = {\n  food_quantity?: InputMaybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Player_Food_Stddev_Pop_Fields = {\n  __typename?: 'player_food_stddev_pop_fields';\n  food_quantity?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"player_food\" */\nexport type Player_Food_Stddev_Pop_Order_By = {\n  food_quantity?: InputMaybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Player_Food_Stddev_Samp_Fields = {\n  __typename?: 'player_food_stddev_samp_fields';\n  food_quantity?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"player_food\" */\nexport type Player_Food_Stddev_Samp_Order_By = {\n  food_quantity?: InputMaybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Player_Food_Sum_Fields = {\n  __typename?: 'player_food_sum_fields';\n  food_quantity?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"player_food\" */\nexport type Player_Food_Sum_Order_By = {\n  food_quantity?: InputMaybe<Order_By>;\n};\n\n/** update columns of table \"player_food\" */\nexport enum Player_Food_Update_Column {\n  /** column name */\n  FoodKind = 'food_kind',\n  /** column name */\n  FoodQuantity = 'food_quantity',\n  /** column name */\n  Player = 'player',\n}\n\n/** aggregate var_pop on columns */\nexport type Player_Food_Var_Pop_Fields = {\n  __typename?: 'player_food_var_pop_fields';\n  food_quantity?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"player_food\" */\nexport type Player_Food_Var_Pop_Order_By = {\n  food_quantity?: InputMaybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Player_Food_Var_Samp_Fields = {\n  __typename?: 'player_food_var_samp_fields';\n  food_quantity?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"player_food\" */\nexport type Player_Food_Var_Samp_Order_By = {\n  food_quantity?: InputMaybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Player_Food_Variance_Fields = {\n  __typename?: 'player_food_variance_fields';\n  food_quantity?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"player_food\" */\nexport type Player_Food_Variance_Order_By = {\n  food_quantity?: InputMaybe<Order_By>;\n};\n\n/** input type for incrementing numeric columns in table \"player\" */\nexport type Player_Inc_Input = {\n  cash?: InputMaybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"player\" */\nexport type Player_Insert_Input = {\n  cash?: InputMaybe<Scalars['Int']>;\n  colour?: InputMaybe<Scalars['String']>;\n  diners?: InputMaybe<Diner_Arr_Rel_Insert_Input>;\n  game?: InputMaybe<Scalars['uuid']>;\n  gameByGame?: InputMaybe<Game_Obj_Rel_Insert_Input>;\n  id?: InputMaybe<Scalars['uuid']>;\n  name?: InputMaybe<Scalars['String']>;\n  player_foods?: InputMaybe<Player_Food_Arr_Rel_Insert_Input>;\n};\n\n/** aggregate max on columns */\nexport type Player_Max_Fields = {\n  __typename?: 'player_max_fields';\n  cash?: Maybe<Scalars['Int']>;\n  colour?: Maybe<Scalars['String']>;\n  game?: Maybe<Scalars['uuid']>;\n  id?: Maybe<Scalars['uuid']>;\n  name?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"player\" */\nexport type Player_Max_Order_By = {\n  cash?: InputMaybe<Order_By>;\n  colour?: InputMaybe<Order_By>;\n  game?: InputMaybe<Order_By>;\n  id?: InputMaybe<Order_By>;\n  name?: InputMaybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Player_Min_Fields = {\n  __typename?: 'player_min_fields';\n  cash?: Maybe<Scalars['Int']>;\n  colour?: Maybe<Scalars['String']>;\n  game?: Maybe<Scalars['uuid']>;\n  id?: Maybe<Scalars['uuid']>;\n  name?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"player\" */\nexport type Player_Min_Order_By = {\n  cash?: InputMaybe<Order_By>;\n  colour?: InputMaybe<Order_By>;\n  game?: InputMaybe<Order_By>;\n  id?: InputMaybe<Order_By>;\n  name?: InputMaybe<Order_By>;\n};\n\n/** response of any mutation on the table \"player\" */\nexport type Player_Mutation_Response = {\n  __typename?: 'player_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<Player>;\n};\n\n/** input type for inserting object relation for remote table \"player\" */\nexport type Player_Obj_Rel_Insert_Input = {\n  data: Player_Insert_Input;\n  /** on conflict condition */\n  on_conflict?: InputMaybe<Player_On_Conflict>;\n};\n\n/** on conflict condition type for table \"player\" */\nexport type Player_On_Conflict = {\n  constraint: Player_Constraint;\n  update_columns?: Array<Player_Update_Column>;\n  where?: InputMaybe<Player_Bool_Exp>;\n};\n\n/** Ordering options when selecting data from \"player\". */\nexport type Player_Order_By = {\n  cash?: InputMaybe<Order_By>;\n  colour?: InputMaybe<Order_By>;\n  diners_aggregate?: InputMaybe<Diner_Aggregate_Order_By>;\n  game?: InputMaybe<Order_By>;\n  gameByGame?: InputMaybe<Game_Order_By>;\n  id?: InputMaybe<Order_By>;\n  name?: InputMaybe<Order_By>;\n  player_foods_aggregate?: InputMaybe<Player_Food_Aggregate_Order_By>;\n};\n\n/** primary key columns input for table: player */\nexport type Player_Pk_Columns_Input = {\n  id: Scalars['uuid'];\n};\n\n/** select columns of table \"player\" */\nexport enum Player_Select_Column {\n  /** column name */\n  Cash = 'cash',\n  /** column name */\n  Colour = 'colour',\n  /** column name */\n  Game = 'game',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Name = 'name',\n}\n\n/** input type for updating data in table \"player\" */\nexport type Player_Set_Input = {\n  cash?: InputMaybe<Scalars['Int']>;\n  colour?: InputMaybe<Scalars['String']>;\n  game?: InputMaybe<Scalars['uuid']>;\n  id?: InputMaybe<Scalars['uuid']>;\n  name?: InputMaybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type Player_Stddev_Fields = {\n  __typename?: 'player_stddev_fields';\n  cash?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"player\" */\nexport type Player_Stddev_Order_By = {\n  cash?: InputMaybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Player_Stddev_Pop_Fields = {\n  __typename?: 'player_stddev_pop_fields';\n  cash?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"player\" */\nexport type Player_Stddev_Pop_Order_By = {\n  cash?: InputMaybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Player_Stddev_Samp_Fields = {\n  __typename?: 'player_stddev_samp_fields';\n  cash?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"player\" */\nexport type Player_Stddev_Samp_Order_By = {\n  cash?: InputMaybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Player_Sum_Fields = {\n  __typename?: 'player_sum_fields';\n  cash?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"player\" */\nexport type Player_Sum_Order_By = {\n  cash?: InputMaybe<Order_By>;\n};\n\n/** update columns of table \"player\" */\nexport enum Player_Update_Column {\n  /** column name */\n  Cash = 'cash',\n  /** column name */\n  Colour = 'colour',\n  /** column name */\n  Game = 'game',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Name = 'name',\n}\n\n/** aggregate var_pop on columns */\nexport type Player_Var_Pop_Fields = {\n  __typename?: 'player_var_pop_fields';\n  cash?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"player\" */\nexport type Player_Var_Pop_Order_By = {\n  cash?: InputMaybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Player_Var_Samp_Fields = {\n  __typename?: 'player_var_samp_fields';\n  cash?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"player\" */\nexport type Player_Var_Samp_Order_By = {\n  cash?: InputMaybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Player_Variance_Fields = {\n  __typename?: 'player_variance_fields';\n  cash?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"player\" */\nexport type Player_Variance_Order_By = {\n  cash?: InputMaybe<Order_By>;\n};\n\nexport type Query_Root = {\n  __typename?: 'query_root';\n  /** fetch data from the table: \"advert\" */\n  advert: Array<Advert>;\n  /** fetch aggregated fields from the table: \"advert\" */\n  advert_aggregate: Advert_Aggregate;\n  /** fetch data from the table: \"advert\" using primary key columns */\n  advert_by_pk?: Maybe<Advert>;\n  /** fetch data from the table: \"board_object\" */\n  board_object: Array<Board_Object>;\n  /** fetch aggregated fields from the table: \"board_object\" */\n  board_object_aggregate: Board_Object_Aggregate;\n  /** fetch data from the table: \"board_object\" using primary key columns */\n  board_object_by_pk?: Maybe<Board_Object>;\n  /** fetch data from the table: \"diner\" */\n  diner: Array<Diner>;\n  /** fetch aggregated fields from the table: \"diner\" */\n  diner_aggregate: Diner_Aggregate;\n  /** fetch data from the table: \"diner\" using primary key columns */\n  diner_by_pk?: Maybe<Diner>;\n  /** fetch data from the table: \"drink\" */\n  drink: Array<Drink>;\n  /** fetch aggregated fields from the table: \"drink\" */\n  drink_aggregate: Drink_Aggregate;\n  /** fetch data from the table: \"drink\" using primary key columns */\n  drink_by_pk?: Maybe<Drink>;\n  /** fetch data from the table: \"employee\" */\n  employee: Array<Employee>;\n  /** fetch aggregated fields from the table: \"employee\" */\n  employee_aggregate: Employee_Aggregate;\n  /** fetch data from the table: \"employee\" using primary key columns */\n  employee_by_pk?: Maybe<Employee>;\n  /** fetch data from the table: \"game\" */\n  game: Array<Game>;\n  /** fetch aggregated fields from the table: \"game\" */\n  game_aggregate: Game_Aggregate;\n  /** fetch data from the table: \"game\" using primary key columns */\n  game_by_pk?: Maybe<Game>;\n  /** fetch data from the table: \"garden\" */\n  garden: Array<Garden>;\n  /** fetch aggregated fields from the table: \"garden\" */\n  garden_aggregate: Garden_Aggregate;\n  /** fetch data from the table: \"garden\" using primary key columns */\n  garden_by_pk?: Maybe<Garden>;\n  /** fetch data from the table: \"house\" */\n  house: Array<House>;\n  /** fetch aggregated fields from the table: \"house\" */\n  house_aggregate: House_Aggregate;\n  /** fetch data from the table: \"house\" using primary key columns */\n  house_by_pk?: Maybe<House>;\n  /** fetch data from the table: \"house_food_demand\" */\n  house_food_demand: Array<House_Food_Demand>;\n  /** fetch aggregated fields from the table: \"house_food_demand\" */\n  house_food_demand_aggregate: House_Food_Demand_Aggregate;\n  /** fetch data from the table: \"house_food_demand\" using primary key columns */\n  house_food_demand_by_pk?: Maybe<House_Food_Demand>;\n  /** fetch data from the table: \"player\" */\n  player: Array<Player>;\n  /** fetch aggregated fields from the table: \"player\" */\n  player_aggregate: Player_Aggregate;\n  /** fetch data from the table: \"player\" using primary key columns */\n  player_by_pk?: Maybe<Player>;\n  /** fetch data from the table: \"player_food\" */\n  player_food: Array<Player_Food>;\n  /** fetch aggregated fields from the table: \"player_food\" */\n  player_food_aggregate: Player_Food_Aggregate;\n  /** fetch data from the table: \"player_food\" using primary key columns */\n  player_food_by_pk?: Maybe<Player_Food>;\n  /** fetch data from the table: \"road\" */\n  road: Array<Road>;\n  /** fetch aggregated fields from the table: \"road\" */\n  road_aggregate: Road_Aggregate;\n  /** fetch data from the table: \"road\" using primary key columns */\n  road_by_pk?: Maybe<Road>;\n  /** fetch data from the table: \"road_connection\" */\n  road_connection: Array<Road_Connection>;\n  /** fetch aggregated fields from the table: \"road_connection\" */\n  road_connection_aggregate: Road_Connection_Aggregate;\n  /** fetch data from the table: \"road_connection\" using primary key columns */\n  road_connection_by_pk?: Maybe<Road_Connection>;\n  /** fetch data from the table: \"user_info\" */\n  user_info: Array<User_Info>;\n  /** fetch aggregated fields from the table: \"user_info\" */\n  user_info_aggregate: User_Info_Aggregate;\n  /** fetch data from the table: \"user_info\" using primary key columns */\n  user_info_by_pk?: Maybe<User_Info>;\n  /** fetch data from the table: \"user_me\" */\n  user_me: Array<User_Me>;\n  /** fetch aggregated fields from the table: \"user_me\" */\n  user_me_aggregate: User_Me_Aggregate;\n};\n\nexport type Query_RootAdvertArgs = {\n  distinct_on?: InputMaybe<Array<Advert_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Advert_Order_By>>;\n  where?: InputMaybe<Advert_Bool_Exp>;\n};\n\nexport type Query_RootAdvert_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Advert_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Advert_Order_By>>;\n  where?: InputMaybe<Advert_Bool_Exp>;\n};\n\nexport type Query_RootAdvert_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\nexport type Query_RootBoard_ObjectArgs = {\n  distinct_on?: InputMaybe<Array<Board_Object_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Board_Object_Order_By>>;\n  where?: InputMaybe<Board_Object_Bool_Exp>;\n};\n\nexport type Query_RootBoard_Object_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Board_Object_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Board_Object_Order_By>>;\n  where?: InputMaybe<Board_Object_Bool_Exp>;\n};\n\nexport type Query_RootBoard_Object_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\nexport type Query_RootDinerArgs = {\n  distinct_on?: InputMaybe<Array<Diner_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Diner_Order_By>>;\n  where?: InputMaybe<Diner_Bool_Exp>;\n};\n\nexport type Query_RootDiner_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Diner_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Diner_Order_By>>;\n  where?: InputMaybe<Diner_Bool_Exp>;\n};\n\nexport type Query_RootDiner_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\nexport type Query_RootDrinkArgs = {\n  distinct_on?: InputMaybe<Array<Drink_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Drink_Order_By>>;\n  where?: InputMaybe<Drink_Bool_Exp>;\n};\n\nexport type Query_RootDrink_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Drink_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Drink_Order_By>>;\n  where?: InputMaybe<Drink_Bool_Exp>;\n};\n\nexport type Query_RootDrink_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\nexport type Query_RootEmployeeArgs = {\n  distinct_on?: InputMaybe<Array<Employee_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Employee_Order_By>>;\n  where?: InputMaybe<Employee_Bool_Exp>;\n};\n\nexport type Query_RootEmployee_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Employee_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Employee_Order_By>>;\n  where?: InputMaybe<Employee_Bool_Exp>;\n};\n\nexport type Query_RootEmployee_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\nexport type Query_RootGameArgs = {\n  distinct_on?: InputMaybe<Array<Game_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Game_Order_By>>;\n  where?: InputMaybe<Game_Bool_Exp>;\n};\n\nexport type Query_RootGame_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Game_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Game_Order_By>>;\n  where?: InputMaybe<Game_Bool_Exp>;\n};\n\nexport type Query_RootGame_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\nexport type Query_RootGardenArgs = {\n  distinct_on?: InputMaybe<Array<Garden_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Garden_Order_By>>;\n  where?: InputMaybe<Garden_Bool_Exp>;\n};\n\nexport type Query_RootGarden_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Garden_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Garden_Order_By>>;\n  where?: InputMaybe<Garden_Bool_Exp>;\n};\n\nexport type Query_RootGarden_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\nexport type Query_RootHouseArgs = {\n  distinct_on?: InputMaybe<Array<House_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<House_Order_By>>;\n  where?: InputMaybe<House_Bool_Exp>;\n};\n\nexport type Query_RootHouse_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<House_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<House_Order_By>>;\n  where?: InputMaybe<House_Bool_Exp>;\n};\n\nexport type Query_RootHouse_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\nexport type Query_RootHouse_Food_DemandArgs = {\n  distinct_on?: InputMaybe<Array<House_Food_Demand_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<House_Food_Demand_Order_By>>;\n  where?: InputMaybe<House_Food_Demand_Bool_Exp>;\n};\n\nexport type Query_RootHouse_Food_Demand_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<House_Food_Demand_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<House_Food_Demand_Order_By>>;\n  where?: InputMaybe<House_Food_Demand_Bool_Exp>;\n};\n\nexport type Query_RootHouse_Food_Demand_By_PkArgs = {\n  food_kind: Scalars['String'];\n  house: Scalars['uuid'];\n};\n\nexport type Query_RootPlayerArgs = {\n  distinct_on?: InputMaybe<Array<Player_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Player_Order_By>>;\n  where?: InputMaybe<Player_Bool_Exp>;\n};\n\nexport type Query_RootPlayer_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Player_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Player_Order_By>>;\n  where?: InputMaybe<Player_Bool_Exp>;\n};\n\nexport type Query_RootPlayer_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\nexport type Query_RootPlayer_FoodArgs = {\n  distinct_on?: InputMaybe<Array<Player_Food_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Player_Food_Order_By>>;\n  where?: InputMaybe<Player_Food_Bool_Exp>;\n};\n\nexport type Query_RootPlayer_Food_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Player_Food_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Player_Food_Order_By>>;\n  where?: InputMaybe<Player_Food_Bool_Exp>;\n};\n\nexport type Query_RootPlayer_Food_By_PkArgs = {\n  food_kind: Scalars['String'];\n  player: Scalars['uuid'];\n};\n\nexport type Query_RootRoadArgs = {\n  distinct_on?: InputMaybe<Array<Road_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Road_Order_By>>;\n  where?: InputMaybe<Road_Bool_Exp>;\n};\n\nexport type Query_RootRoad_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Road_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Road_Order_By>>;\n  where?: InputMaybe<Road_Bool_Exp>;\n};\n\nexport type Query_RootRoad_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\nexport type Query_RootRoad_ConnectionArgs = {\n  distinct_on?: InputMaybe<Array<Road_Connection_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Road_Connection_Order_By>>;\n  where?: InputMaybe<Road_Connection_Bool_Exp>;\n};\n\nexport type Query_RootRoad_Connection_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Road_Connection_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Road_Connection_Order_By>>;\n  where?: InputMaybe<Road_Connection_Bool_Exp>;\n};\n\nexport type Query_RootRoad_Connection_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\nexport type Query_RootUser_InfoArgs = {\n  distinct_on?: InputMaybe<Array<User_Info_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<User_Info_Order_By>>;\n  where?: InputMaybe<User_Info_Bool_Exp>;\n};\n\nexport type Query_RootUser_Info_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<User_Info_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<User_Info_Order_By>>;\n  where?: InputMaybe<User_Info_Bool_Exp>;\n};\n\nexport type Query_RootUser_Info_By_PkArgs = {\n  id: Scalars['String'];\n};\n\nexport type Query_RootUser_MeArgs = {\n  distinct_on?: InputMaybe<Array<User_Me_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<User_Me_Order_By>>;\n  where?: InputMaybe<User_Me_Bool_Exp>;\n};\n\nexport type Query_RootUser_Me_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<User_Me_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<User_Me_Order_By>>;\n  where?: InputMaybe<User_Me_Bool_Exp>;\n};\n\n/** columns and relationships of \"road\" */\nexport type Road = {\n  __typename?: 'road';\n  /** An object relationship */\n  board_object: Board_Object;\n  game: Scalars['uuid'];\n  /** An object relationship */\n  gameByGame: Game;\n  id: Scalars['uuid'];\n  /** An object relationship */\n  road_connection?: Maybe<Road_Connection>;\n};\n\n/** aggregated selection of \"road\" */\nexport type Road_Aggregate = {\n  __typename?: 'road_aggregate';\n  aggregate?: Maybe<Road_Aggregate_Fields>;\n  nodes: Array<Road>;\n};\n\n/** aggregate fields of \"road\" */\nexport type Road_Aggregate_Fields = {\n  __typename?: 'road_aggregate_fields';\n  count: Scalars['Int'];\n  max?: Maybe<Road_Max_Fields>;\n  min?: Maybe<Road_Min_Fields>;\n};\n\n/** aggregate fields of \"road\" */\nexport type Road_Aggregate_FieldsCountArgs = {\n  columns?: InputMaybe<Array<Road_Select_Column>>;\n  distinct?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"road\" */\nexport type Road_Aggregate_Order_By = {\n  count?: InputMaybe<Order_By>;\n  max?: InputMaybe<Road_Max_Order_By>;\n  min?: InputMaybe<Road_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"road\" */\nexport type Road_Arr_Rel_Insert_Input = {\n  data: Array<Road_Insert_Input>;\n  /** on conflict condition */\n  on_conflict?: InputMaybe<Road_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"road\". All fields are combined with a logical 'AND'. */\nexport type Road_Bool_Exp = {\n  _and?: InputMaybe<Array<Road_Bool_Exp>>;\n  _not?: InputMaybe<Road_Bool_Exp>;\n  _or?: InputMaybe<Array<Road_Bool_Exp>>;\n  board_object?: InputMaybe<Board_Object_Bool_Exp>;\n  game?: InputMaybe<Uuid_Comparison_Exp>;\n  gameByGame?: InputMaybe<Game_Bool_Exp>;\n  id?: InputMaybe<Uuid_Comparison_Exp>;\n  road_connection?: InputMaybe<Road_Connection_Bool_Exp>;\n};\n\n/** columns and relationships of \"road_connection\" */\nexport type Road_Connection = {\n  __typename?: 'road_connection';\n  id: Scalars['uuid'];\n  number: Scalars['Int'];\n  /** An object relationship */\n  road: Road;\n};\n\n/** aggregated selection of \"road_connection\" */\nexport type Road_Connection_Aggregate = {\n  __typename?: 'road_connection_aggregate';\n  aggregate?: Maybe<Road_Connection_Aggregate_Fields>;\n  nodes: Array<Road_Connection>;\n};\n\n/** aggregate fields of \"road_connection\" */\nexport type Road_Connection_Aggregate_Fields = {\n  __typename?: 'road_connection_aggregate_fields';\n  avg?: Maybe<Road_Connection_Avg_Fields>;\n  count: Scalars['Int'];\n  max?: Maybe<Road_Connection_Max_Fields>;\n  min?: Maybe<Road_Connection_Min_Fields>;\n  stddev?: Maybe<Road_Connection_Stddev_Fields>;\n  stddev_pop?: Maybe<Road_Connection_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Road_Connection_Stddev_Samp_Fields>;\n  sum?: Maybe<Road_Connection_Sum_Fields>;\n  var_pop?: Maybe<Road_Connection_Var_Pop_Fields>;\n  var_samp?: Maybe<Road_Connection_Var_Samp_Fields>;\n  variance?: Maybe<Road_Connection_Variance_Fields>;\n};\n\n/** aggregate fields of \"road_connection\" */\nexport type Road_Connection_Aggregate_FieldsCountArgs = {\n  columns?: InputMaybe<Array<Road_Connection_Select_Column>>;\n  distinct?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** aggregate avg on columns */\nexport type Road_Connection_Avg_Fields = {\n  __typename?: 'road_connection_avg_fields';\n  number?: Maybe<Scalars['Float']>;\n};\n\n/** Boolean expression to filter rows from the table \"road_connection\". All fields are combined with a logical 'AND'. */\nexport type Road_Connection_Bool_Exp = {\n  _and?: InputMaybe<Array<Road_Connection_Bool_Exp>>;\n  _not?: InputMaybe<Road_Connection_Bool_Exp>;\n  _or?: InputMaybe<Array<Road_Connection_Bool_Exp>>;\n  id?: InputMaybe<Uuid_Comparison_Exp>;\n  number?: InputMaybe<Int_Comparison_Exp>;\n  road?: InputMaybe<Road_Bool_Exp>;\n};\n\n/** unique or primary key constraints on table \"road_connection\" */\nexport enum Road_Connection_Constraint {\n  /** unique or primary key constraint */\n  RoadConnectionPkey = 'road_connection_pkey',\n}\n\n/** input type for incrementing numeric columns in table \"road_connection\" */\nexport type Road_Connection_Inc_Input = {\n  number?: InputMaybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"road_connection\" */\nexport type Road_Connection_Insert_Input = {\n  id?: InputMaybe<Scalars['uuid']>;\n  number?: InputMaybe<Scalars['Int']>;\n  road?: InputMaybe<Road_Obj_Rel_Insert_Input>;\n};\n\n/** aggregate max on columns */\nexport type Road_Connection_Max_Fields = {\n  __typename?: 'road_connection_max_fields';\n  id?: Maybe<Scalars['uuid']>;\n  number?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate min on columns */\nexport type Road_Connection_Min_Fields = {\n  __typename?: 'road_connection_min_fields';\n  id?: Maybe<Scalars['uuid']>;\n  number?: Maybe<Scalars['Int']>;\n};\n\n/** response of any mutation on the table \"road_connection\" */\nexport type Road_Connection_Mutation_Response = {\n  __typename?: 'road_connection_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<Road_Connection>;\n};\n\n/** input type for inserting object relation for remote table \"road_connection\" */\nexport type Road_Connection_Obj_Rel_Insert_Input = {\n  data: Road_Connection_Insert_Input;\n  /** on conflict condition */\n  on_conflict?: InputMaybe<Road_Connection_On_Conflict>;\n};\n\n/** on conflict condition type for table \"road_connection\" */\nexport type Road_Connection_On_Conflict = {\n  constraint: Road_Connection_Constraint;\n  update_columns?: Array<Road_Connection_Update_Column>;\n  where?: InputMaybe<Road_Connection_Bool_Exp>;\n};\n\n/** Ordering options when selecting data from \"road_connection\". */\nexport type Road_Connection_Order_By = {\n  id?: InputMaybe<Order_By>;\n  number?: InputMaybe<Order_By>;\n  road?: InputMaybe<Road_Order_By>;\n};\n\n/** primary key columns input for table: road_connection */\nexport type Road_Connection_Pk_Columns_Input = {\n  id: Scalars['uuid'];\n};\n\n/** select columns of table \"road_connection\" */\nexport enum Road_Connection_Select_Column {\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Number = 'number',\n}\n\n/** input type for updating data in table \"road_connection\" */\nexport type Road_Connection_Set_Input = {\n  id?: InputMaybe<Scalars['uuid']>;\n  number?: InputMaybe<Scalars['Int']>;\n};\n\n/** aggregate stddev on columns */\nexport type Road_Connection_Stddev_Fields = {\n  __typename?: 'road_connection_stddev_fields';\n  number?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Road_Connection_Stddev_Pop_Fields = {\n  __typename?: 'road_connection_stddev_pop_fields';\n  number?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Road_Connection_Stddev_Samp_Fields = {\n  __typename?: 'road_connection_stddev_samp_fields';\n  number?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate sum on columns */\nexport type Road_Connection_Sum_Fields = {\n  __typename?: 'road_connection_sum_fields';\n  number?: Maybe<Scalars['Int']>;\n};\n\n/** update columns of table \"road_connection\" */\nexport enum Road_Connection_Update_Column {\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Number = 'number',\n}\n\n/** aggregate var_pop on columns */\nexport type Road_Connection_Var_Pop_Fields = {\n  __typename?: 'road_connection_var_pop_fields';\n  number?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate var_samp on columns */\nexport type Road_Connection_Var_Samp_Fields = {\n  __typename?: 'road_connection_var_samp_fields';\n  number?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate variance on columns */\nexport type Road_Connection_Variance_Fields = {\n  __typename?: 'road_connection_variance_fields';\n  number?: Maybe<Scalars['Float']>;\n};\n\n/** unique or primary key constraints on table \"road\" */\nexport enum Road_Constraint {\n  /** unique or primary key constraint */\n  RoadPkey = 'road_pkey',\n}\n\n/** input type for inserting data into table \"road\" */\nexport type Road_Insert_Input = {\n  board_object?: InputMaybe<Board_Object_Obj_Rel_Insert_Input>;\n  game?: InputMaybe<Scalars['uuid']>;\n  gameByGame?: InputMaybe<Game_Obj_Rel_Insert_Input>;\n  id?: InputMaybe<Scalars['uuid']>;\n  road_connection?: InputMaybe<Road_Connection_Obj_Rel_Insert_Input>;\n};\n\n/** aggregate max on columns */\nexport type Road_Max_Fields = {\n  __typename?: 'road_max_fields';\n  game?: Maybe<Scalars['uuid']>;\n  id?: Maybe<Scalars['uuid']>;\n};\n\n/** order by max() on columns of table \"road\" */\nexport type Road_Max_Order_By = {\n  game?: InputMaybe<Order_By>;\n  id?: InputMaybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Road_Min_Fields = {\n  __typename?: 'road_min_fields';\n  game?: Maybe<Scalars['uuid']>;\n  id?: Maybe<Scalars['uuid']>;\n};\n\n/** order by min() on columns of table \"road\" */\nexport type Road_Min_Order_By = {\n  game?: InputMaybe<Order_By>;\n  id?: InputMaybe<Order_By>;\n};\n\n/** response of any mutation on the table \"road\" */\nexport type Road_Mutation_Response = {\n  __typename?: 'road_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<Road>;\n};\n\n/** input type for inserting object relation for remote table \"road\" */\nexport type Road_Obj_Rel_Insert_Input = {\n  data: Road_Insert_Input;\n  /** on conflict condition */\n  on_conflict?: InputMaybe<Road_On_Conflict>;\n};\n\n/** on conflict condition type for table \"road\" */\nexport type Road_On_Conflict = {\n  constraint: Road_Constraint;\n  update_columns?: Array<Road_Update_Column>;\n  where?: InputMaybe<Road_Bool_Exp>;\n};\n\n/** Ordering options when selecting data from \"road\". */\nexport type Road_Order_By = {\n  board_object?: InputMaybe<Board_Object_Order_By>;\n  game?: InputMaybe<Order_By>;\n  gameByGame?: InputMaybe<Game_Order_By>;\n  id?: InputMaybe<Order_By>;\n  road_connection?: InputMaybe<Road_Connection_Order_By>;\n};\n\n/** primary key columns input for table: road */\nexport type Road_Pk_Columns_Input = {\n  id: Scalars['uuid'];\n};\n\n/** select columns of table \"road\" */\nexport enum Road_Select_Column {\n  /** column name */\n  Game = 'game',\n  /** column name */\n  Id = 'id',\n}\n\n/** input type for updating data in table \"road\" */\nexport type Road_Set_Input = {\n  game?: InputMaybe<Scalars['uuid']>;\n  id?: InputMaybe<Scalars['uuid']>;\n};\n\n/** update columns of table \"road\" */\nexport enum Road_Update_Column {\n  /** column name */\n  Game = 'game',\n  /** column name */\n  Id = 'id',\n}\n\nexport type Subscription_Root = {\n  __typename?: 'subscription_root';\n  /** fetch data from the table: \"advert\" */\n  advert: Array<Advert>;\n  /** fetch aggregated fields from the table: \"advert\" */\n  advert_aggregate: Advert_Aggregate;\n  /** fetch data from the table: \"advert\" using primary key columns */\n  advert_by_pk?: Maybe<Advert>;\n  /** fetch data from the table: \"board_object\" */\n  board_object: Array<Board_Object>;\n  /** fetch aggregated fields from the table: \"board_object\" */\n  board_object_aggregate: Board_Object_Aggregate;\n  /** fetch data from the table: \"board_object\" using primary key columns */\n  board_object_by_pk?: Maybe<Board_Object>;\n  /** fetch data from the table: \"diner\" */\n  diner: Array<Diner>;\n  /** fetch aggregated fields from the table: \"diner\" */\n  diner_aggregate: Diner_Aggregate;\n  /** fetch data from the table: \"diner\" using primary key columns */\n  diner_by_pk?: Maybe<Diner>;\n  /** fetch data from the table: \"drink\" */\n  drink: Array<Drink>;\n  /** fetch aggregated fields from the table: \"drink\" */\n  drink_aggregate: Drink_Aggregate;\n  /** fetch data from the table: \"drink\" using primary key columns */\n  drink_by_pk?: Maybe<Drink>;\n  /** fetch data from the table: \"employee\" */\n  employee: Array<Employee>;\n  /** fetch aggregated fields from the table: \"employee\" */\n  employee_aggregate: Employee_Aggregate;\n  /** fetch data from the table: \"employee\" using primary key columns */\n  employee_by_pk?: Maybe<Employee>;\n  /** fetch data from the table: \"game\" */\n  game: Array<Game>;\n  /** fetch aggregated fields from the table: \"game\" */\n  game_aggregate: Game_Aggregate;\n  /** fetch data from the table: \"game\" using primary key columns */\n  game_by_pk?: Maybe<Game>;\n  /** fetch data from the table: \"garden\" */\n  garden: Array<Garden>;\n  /** fetch aggregated fields from the table: \"garden\" */\n  garden_aggregate: Garden_Aggregate;\n  /** fetch data from the table: \"garden\" using primary key columns */\n  garden_by_pk?: Maybe<Garden>;\n  /** fetch data from the table: \"house\" */\n  house: Array<House>;\n  /** fetch aggregated fields from the table: \"house\" */\n  house_aggregate: House_Aggregate;\n  /** fetch data from the table: \"house\" using primary key columns */\n  house_by_pk?: Maybe<House>;\n  /** fetch data from the table: \"house_food_demand\" */\n  house_food_demand: Array<House_Food_Demand>;\n  /** fetch aggregated fields from the table: \"house_food_demand\" */\n  house_food_demand_aggregate: House_Food_Demand_Aggregate;\n  /** fetch data from the table: \"house_food_demand\" using primary key columns */\n  house_food_demand_by_pk?: Maybe<House_Food_Demand>;\n  /** fetch data from the table: \"player\" */\n  player: Array<Player>;\n  /** fetch aggregated fields from the table: \"player\" */\n  player_aggregate: Player_Aggregate;\n  /** fetch data from the table: \"player\" using primary key columns */\n  player_by_pk?: Maybe<Player>;\n  /** fetch data from the table: \"player_food\" */\n  player_food: Array<Player_Food>;\n  /** fetch aggregated fields from the table: \"player_food\" */\n  player_food_aggregate: Player_Food_Aggregate;\n  /** fetch data from the table: \"player_food\" using primary key columns */\n  player_food_by_pk?: Maybe<Player_Food>;\n  /** fetch data from the table: \"road\" */\n  road: Array<Road>;\n  /** fetch aggregated fields from the table: \"road\" */\n  road_aggregate: Road_Aggregate;\n  /** fetch data from the table: \"road\" using primary key columns */\n  road_by_pk?: Maybe<Road>;\n  /** fetch data from the table: \"road_connection\" */\n  road_connection: Array<Road_Connection>;\n  /** fetch aggregated fields from the table: \"road_connection\" */\n  road_connection_aggregate: Road_Connection_Aggregate;\n  /** fetch data from the table: \"road_connection\" using primary key columns */\n  road_connection_by_pk?: Maybe<Road_Connection>;\n  /** fetch data from the table: \"user_info\" */\n  user_info: Array<User_Info>;\n  /** fetch aggregated fields from the table: \"user_info\" */\n  user_info_aggregate: User_Info_Aggregate;\n  /** fetch data from the table: \"user_info\" using primary key columns */\n  user_info_by_pk?: Maybe<User_Info>;\n  /** fetch data from the table: \"user_me\" */\n  user_me: Array<User_Me>;\n  /** fetch aggregated fields from the table: \"user_me\" */\n  user_me_aggregate: User_Me_Aggregate;\n};\n\nexport type Subscription_RootAdvertArgs = {\n  distinct_on?: InputMaybe<Array<Advert_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Advert_Order_By>>;\n  where?: InputMaybe<Advert_Bool_Exp>;\n};\n\nexport type Subscription_RootAdvert_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Advert_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Advert_Order_By>>;\n  where?: InputMaybe<Advert_Bool_Exp>;\n};\n\nexport type Subscription_RootAdvert_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\nexport type Subscription_RootBoard_ObjectArgs = {\n  distinct_on?: InputMaybe<Array<Board_Object_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Board_Object_Order_By>>;\n  where?: InputMaybe<Board_Object_Bool_Exp>;\n};\n\nexport type Subscription_RootBoard_Object_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Board_Object_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Board_Object_Order_By>>;\n  where?: InputMaybe<Board_Object_Bool_Exp>;\n};\n\nexport type Subscription_RootBoard_Object_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\nexport type Subscription_RootDinerArgs = {\n  distinct_on?: InputMaybe<Array<Diner_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Diner_Order_By>>;\n  where?: InputMaybe<Diner_Bool_Exp>;\n};\n\nexport type Subscription_RootDiner_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Diner_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Diner_Order_By>>;\n  where?: InputMaybe<Diner_Bool_Exp>;\n};\n\nexport type Subscription_RootDiner_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\nexport type Subscription_RootDrinkArgs = {\n  distinct_on?: InputMaybe<Array<Drink_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Drink_Order_By>>;\n  where?: InputMaybe<Drink_Bool_Exp>;\n};\n\nexport type Subscription_RootDrink_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Drink_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Drink_Order_By>>;\n  where?: InputMaybe<Drink_Bool_Exp>;\n};\n\nexport type Subscription_RootDrink_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\nexport type Subscription_RootEmployeeArgs = {\n  distinct_on?: InputMaybe<Array<Employee_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Employee_Order_By>>;\n  where?: InputMaybe<Employee_Bool_Exp>;\n};\n\nexport type Subscription_RootEmployee_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Employee_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Employee_Order_By>>;\n  where?: InputMaybe<Employee_Bool_Exp>;\n};\n\nexport type Subscription_RootEmployee_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\nexport type Subscription_RootGameArgs = {\n  distinct_on?: InputMaybe<Array<Game_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Game_Order_By>>;\n  where?: InputMaybe<Game_Bool_Exp>;\n};\n\nexport type Subscription_RootGame_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Game_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Game_Order_By>>;\n  where?: InputMaybe<Game_Bool_Exp>;\n};\n\nexport type Subscription_RootGame_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\nexport type Subscription_RootGardenArgs = {\n  distinct_on?: InputMaybe<Array<Garden_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Garden_Order_By>>;\n  where?: InputMaybe<Garden_Bool_Exp>;\n};\n\nexport type Subscription_RootGarden_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Garden_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Garden_Order_By>>;\n  where?: InputMaybe<Garden_Bool_Exp>;\n};\n\nexport type Subscription_RootGarden_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\nexport type Subscription_RootHouseArgs = {\n  distinct_on?: InputMaybe<Array<House_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<House_Order_By>>;\n  where?: InputMaybe<House_Bool_Exp>;\n};\n\nexport type Subscription_RootHouse_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<House_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<House_Order_By>>;\n  where?: InputMaybe<House_Bool_Exp>;\n};\n\nexport type Subscription_RootHouse_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\nexport type Subscription_RootHouse_Food_DemandArgs = {\n  distinct_on?: InputMaybe<Array<House_Food_Demand_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<House_Food_Demand_Order_By>>;\n  where?: InputMaybe<House_Food_Demand_Bool_Exp>;\n};\n\nexport type Subscription_RootHouse_Food_Demand_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<House_Food_Demand_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<House_Food_Demand_Order_By>>;\n  where?: InputMaybe<House_Food_Demand_Bool_Exp>;\n};\n\nexport type Subscription_RootHouse_Food_Demand_By_PkArgs = {\n  food_kind: Scalars['String'];\n  house: Scalars['uuid'];\n};\n\nexport type Subscription_RootPlayerArgs = {\n  distinct_on?: InputMaybe<Array<Player_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Player_Order_By>>;\n  where?: InputMaybe<Player_Bool_Exp>;\n};\n\nexport type Subscription_RootPlayer_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Player_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Player_Order_By>>;\n  where?: InputMaybe<Player_Bool_Exp>;\n};\n\nexport type Subscription_RootPlayer_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\nexport type Subscription_RootPlayer_FoodArgs = {\n  distinct_on?: InputMaybe<Array<Player_Food_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Player_Food_Order_By>>;\n  where?: InputMaybe<Player_Food_Bool_Exp>;\n};\n\nexport type Subscription_RootPlayer_Food_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Player_Food_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Player_Food_Order_By>>;\n  where?: InputMaybe<Player_Food_Bool_Exp>;\n};\n\nexport type Subscription_RootPlayer_Food_By_PkArgs = {\n  food_kind: Scalars['String'];\n  player: Scalars['uuid'];\n};\n\nexport type Subscription_RootRoadArgs = {\n  distinct_on?: InputMaybe<Array<Road_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Road_Order_By>>;\n  where?: InputMaybe<Road_Bool_Exp>;\n};\n\nexport type Subscription_RootRoad_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Road_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Road_Order_By>>;\n  where?: InputMaybe<Road_Bool_Exp>;\n};\n\nexport type Subscription_RootRoad_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\nexport type Subscription_RootRoad_ConnectionArgs = {\n  distinct_on?: InputMaybe<Array<Road_Connection_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Road_Connection_Order_By>>;\n  where?: InputMaybe<Road_Connection_Bool_Exp>;\n};\n\nexport type Subscription_RootRoad_Connection_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Road_Connection_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Road_Connection_Order_By>>;\n  where?: InputMaybe<Road_Connection_Bool_Exp>;\n};\n\nexport type Subscription_RootRoad_Connection_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\nexport type Subscription_RootUser_InfoArgs = {\n  distinct_on?: InputMaybe<Array<User_Info_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<User_Info_Order_By>>;\n  where?: InputMaybe<User_Info_Bool_Exp>;\n};\n\nexport type Subscription_RootUser_Info_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<User_Info_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<User_Info_Order_By>>;\n  where?: InputMaybe<User_Info_Bool_Exp>;\n};\n\nexport type Subscription_RootUser_Info_By_PkArgs = {\n  id: Scalars['String'];\n};\n\nexport type Subscription_RootUser_MeArgs = {\n  distinct_on?: InputMaybe<Array<User_Me_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<User_Me_Order_By>>;\n  where?: InputMaybe<User_Me_Bool_Exp>;\n};\n\nexport type Subscription_RootUser_Me_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<User_Me_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<User_Me_Order_By>>;\n  where?: InputMaybe<User_Me_Bool_Exp>;\n};\n\n/** columns and relationships of \"user_info\" */\nexport type User_Info = {\n  __typename?: 'user_info';\n  avatar_url?: Maybe<Scalars['String']>;\n  display_name?: Maybe<Scalars['String']>;\n  id: Scalars['String'];\n  name?: Maybe<Scalars['String']>;\n  nickname: Scalars['String'];\n};\n\n/** aggregated selection of \"user_info\" */\nexport type User_Info_Aggregate = {\n  __typename?: 'user_info_aggregate';\n  aggregate?: Maybe<User_Info_Aggregate_Fields>;\n  nodes: Array<User_Info>;\n};\n\n/** aggregate fields of \"user_info\" */\nexport type User_Info_Aggregate_Fields = {\n  __typename?: 'user_info_aggregate_fields';\n  count: Scalars['Int'];\n  max?: Maybe<User_Info_Max_Fields>;\n  min?: Maybe<User_Info_Min_Fields>;\n};\n\n/** aggregate fields of \"user_info\" */\nexport type User_Info_Aggregate_FieldsCountArgs = {\n  columns?: InputMaybe<Array<User_Info_Select_Column>>;\n  distinct?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** Boolean expression to filter rows from the table \"user_info\". All fields are combined with a logical 'AND'. */\nexport type User_Info_Bool_Exp = {\n  _and?: InputMaybe<Array<User_Info_Bool_Exp>>;\n  _not?: InputMaybe<User_Info_Bool_Exp>;\n  _or?: InputMaybe<Array<User_Info_Bool_Exp>>;\n  avatar_url?: InputMaybe<String_Comparison_Exp>;\n  display_name?: InputMaybe<String_Comparison_Exp>;\n  id?: InputMaybe<String_Comparison_Exp>;\n  name?: InputMaybe<String_Comparison_Exp>;\n  nickname?: InputMaybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"user_info\" */\nexport enum User_Info_Constraint {\n  /** unique or primary key constraint */\n  UserInfoDisplayNameKey = 'user_info_display_name_key',\n  /** unique or primary key constraint */\n  UserPkey = 'user_pkey',\n}\n\n/** input type for inserting data into table \"user_info\" */\nexport type User_Info_Insert_Input = {\n  avatar_url?: InputMaybe<Scalars['String']>;\n  display_name?: InputMaybe<Scalars['String']>;\n  id?: InputMaybe<Scalars['String']>;\n  name?: InputMaybe<Scalars['String']>;\n  nickname?: InputMaybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type User_Info_Max_Fields = {\n  __typename?: 'user_info_max_fields';\n  avatar_url?: Maybe<Scalars['String']>;\n  display_name?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  nickname?: Maybe<Scalars['String']>;\n};\n\n/** aggregate min on columns */\nexport type User_Info_Min_Fields = {\n  __typename?: 'user_info_min_fields';\n  avatar_url?: Maybe<Scalars['String']>;\n  display_name?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  nickname?: Maybe<Scalars['String']>;\n};\n\n/** response of any mutation on the table \"user_info\" */\nexport type User_Info_Mutation_Response = {\n  __typename?: 'user_info_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<User_Info>;\n};\n\n/** on conflict condition type for table \"user_info\" */\nexport type User_Info_On_Conflict = {\n  constraint: User_Info_Constraint;\n  update_columns?: Array<User_Info_Update_Column>;\n  where?: InputMaybe<User_Info_Bool_Exp>;\n};\n\n/** Ordering options when selecting data from \"user_info\". */\nexport type User_Info_Order_By = {\n  avatar_url?: InputMaybe<Order_By>;\n  display_name?: InputMaybe<Order_By>;\n  id?: InputMaybe<Order_By>;\n  name?: InputMaybe<Order_By>;\n  nickname?: InputMaybe<Order_By>;\n};\n\n/** primary key columns input for table: user_info */\nexport type User_Info_Pk_Columns_Input = {\n  id: Scalars['String'];\n};\n\n/** select columns of table \"user_info\" */\nexport enum User_Info_Select_Column {\n  /** column name */\n  AvatarUrl = 'avatar_url',\n  /** column name */\n  DisplayName = 'display_name',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  Nickname = 'nickname',\n}\n\n/** input type for updating data in table \"user_info\" */\nexport type User_Info_Set_Input = {\n  avatar_url?: InputMaybe<Scalars['String']>;\n  display_name?: InputMaybe<Scalars['String']>;\n  id?: InputMaybe<Scalars['String']>;\n  name?: InputMaybe<Scalars['String']>;\n  nickname?: InputMaybe<Scalars['String']>;\n};\n\n/** update columns of table \"user_info\" */\nexport enum User_Info_Update_Column {\n  /** column name */\n  AvatarUrl = 'avatar_url',\n  /** column name */\n  DisplayName = 'display_name',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  Nickname = 'nickname',\n}\n\n/** columns and relationships of \"user_me\" */\nexport type User_Me = {\n  __typename?: 'user_me';\n  display_name?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  nickname?: Maybe<Scalars['String']>;\n};\n\n/** aggregated selection of \"user_me\" */\nexport type User_Me_Aggregate = {\n  __typename?: 'user_me_aggregate';\n  aggregate?: Maybe<User_Me_Aggregate_Fields>;\n  nodes: Array<User_Me>;\n};\n\n/** aggregate fields of \"user_me\" */\nexport type User_Me_Aggregate_Fields = {\n  __typename?: 'user_me_aggregate_fields';\n  count: Scalars['Int'];\n  max?: Maybe<User_Me_Max_Fields>;\n  min?: Maybe<User_Me_Min_Fields>;\n};\n\n/** aggregate fields of \"user_me\" */\nexport type User_Me_Aggregate_FieldsCountArgs = {\n  columns?: InputMaybe<Array<User_Me_Select_Column>>;\n  distinct?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** Boolean expression to filter rows from the table \"user_me\". All fields are combined with a logical 'AND'. */\nexport type User_Me_Bool_Exp = {\n  _and?: InputMaybe<Array<User_Me_Bool_Exp>>;\n  _not?: InputMaybe<User_Me_Bool_Exp>;\n  _or?: InputMaybe<Array<User_Me_Bool_Exp>>;\n  display_name?: InputMaybe<String_Comparison_Exp>;\n  id?: InputMaybe<String_Comparison_Exp>;\n  name?: InputMaybe<String_Comparison_Exp>;\n  nickname?: InputMaybe<String_Comparison_Exp>;\n};\n\n/** input type for inserting data into table \"user_me\" */\nexport type User_Me_Insert_Input = {\n  display_name?: InputMaybe<Scalars['String']>;\n  id?: InputMaybe<Scalars['String']>;\n  name?: InputMaybe<Scalars['String']>;\n  nickname?: InputMaybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type User_Me_Max_Fields = {\n  __typename?: 'user_me_max_fields';\n  display_name?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  nickname?: Maybe<Scalars['String']>;\n};\n\n/** aggregate min on columns */\nexport type User_Me_Min_Fields = {\n  __typename?: 'user_me_min_fields';\n  display_name?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  nickname?: Maybe<Scalars['String']>;\n};\n\n/** response of any mutation on the table \"user_me\" */\nexport type User_Me_Mutation_Response = {\n  __typename?: 'user_me_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<User_Me>;\n};\n\n/** Ordering options when selecting data from \"user_me\". */\nexport type User_Me_Order_By = {\n  display_name?: InputMaybe<Order_By>;\n  id?: InputMaybe<Order_By>;\n  name?: InputMaybe<Order_By>;\n  nickname?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"user_me\" */\nexport enum User_Me_Select_Column {\n  /** column name */\n  DisplayName = 'display_name',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  Nickname = 'nickname',\n}\n\n/** input type for updating data in table \"user_me\" */\nexport type User_Me_Set_Input = {\n  display_name?: InputMaybe<Scalars['String']>;\n  id?: InputMaybe<Scalars['String']>;\n  name?: InputMaybe<Scalars['String']>;\n  nickname?: InputMaybe<Scalars['String']>;\n};\n\n/** Boolean expression to compare columns of type \"uuid\". All fields are combined with logical 'AND'. */\nexport type Uuid_Comparison_Exp = {\n  _eq?: InputMaybe<Scalars['uuid']>;\n  _gt?: InputMaybe<Scalars['uuid']>;\n  _gte?: InputMaybe<Scalars['uuid']>;\n  _in?: InputMaybe<Array<Scalars['uuid']>>;\n  _is_null?: InputMaybe<Scalars['Boolean']>;\n  _lt?: InputMaybe<Scalars['uuid']>;\n  _lte?: InputMaybe<Scalars['uuid']>;\n  _neq?: InputMaybe<Scalars['uuid']>;\n  _nin?: InputMaybe<Array<Scalars['uuid']>>;\n};\n\nexport type SelfQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type SelfQuery = {\n  __typename?: 'query_root';\n  user_me: Array<{\n    __typename?: 'user_me';\n    display_name?: string | null;\n    id?: string | null;\n    name?: string | null;\n    nickname?: string | null;\n  }>;\n};\n\nexport type SetDisplayNameByUserIdMutationVariables = Exact<{\n  id: Scalars['String'];\n  display_name: Scalars['String'];\n}>;\n\nexport type SetDisplayNameByUserIdMutation = {\n  __typename?: 'mutation_root';\n  update_user_info_by_pk?: {\n    __typename?: 'user_info';\n    display_name?: string | null;\n  } | null;\n};\n\nexport const SelfDocument = gql`\n  query Self {\n    user_me {\n      display_name\n      id\n      name\n      nickname\n    }\n  }\n`;\n\n/**\n * __useSelfQuery__\n *\n * To run a query within a React component, call `useSelfQuery` and pass it any options that fit your needs.\n * When your component renders, `useSelfQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSelfQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useSelfQuery(\n  baseOptions?: Apollo.QueryHookOptions<SelfQuery, SelfQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<SelfQuery, SelfQueryVariables>(SelfDocument, options);\n}\nexport function useSelfLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<SelfQuery, SelfQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<SelfQuery, SelfQueryVariables>(\n    SelfDocument,\n    options\n  );\n}\nexport type SelfQueryHookResult = ReturnType<typeof useSelfQuery>;\nexport type SelfLazyQueryHookResult = ReturnType<typeof useSelfLazyQuery>;\nexport type SelfQueryResult = Apollo.QueryResult<SelfQuery, SelfQueryVariables>;\nexport const SetDisplayNameByUserIdDocument = gql`\n  mutation SetDisplayNameByUserID($id: String!, $display_name: String!) {\n    update_user_info_by_pk(\n      pk_columns: { id: $id }\n      _set: { display_name: $display_name }\n    ) {\n      display_name\n    }\n  }\n`;\nexport type SetDisplayNameByUserIdMutationFn = Apollo.MutationFunction<\n  SetDisplayNameByUserIdMutation,\n  SetDisplayNameByUserIdMutationVariables\n>;\n\n/**\n * __useSetDisplayNameByUserIdMutation__\n *\n * To run a mutation, you first call `useSetDisplayNameByUserIdMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetDisplayNameByUserIdMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setDisplayNameByUserIdMutation, { data, loading, error }] = useSetDisplayNameByUserIdMutation({\n *   variables: {\n *      id: // value for 'id'\n *      display_name: // value for 'display_name'\n *   },\n * });\n */\nexport function useSetDisplayNameByUserIdMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SetDisplayNameByUserIdMutation,\n    SetDisplayNameByUserIdMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    SetDisplayNameByUserIdMutation,\n    SetDisplayNameByUserIdMutationVariables\n  >(SetDisplayNameByUserIdDocument, options);\n}\nexport type SetDisplayNameByUserIdMutationHookResult = ReturnType<\n  typeof useSetDisplayNameByUserIdMutation\n>;\nexport type SetDisplayNameByUserIdMutationResult =\n  Apollo.MutationResult<SetDisplayNameByUserIdMutation>;\nexport type SetDisplayNameByUserIdMutationOptions = Apollo.BaseMutationOptions<\n  SetDisplayNameByUserIdMutation,\n  SetDisplayNameByUserIdMutationVariables\n>;\n","export * from './lib/apollo-bootstrapper';\n","import {\n  ApolloClient,\n  createHttpLink,\n  DefaultOptions,\n  HttpOptions,\n  InMemoryCache,\n  InMemoryCacheConfig,\n  NormalizedCacheObject,\n  split,\n} from '@apollo/client';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { OperationDefinitionNode } from 'graphql';\n\nexport const apolloBootstrapper = (\n  uri: string,\n  secure: boolean,\n  access: 'user' | 'admin-secret',\n  token: () => string,\n  cacheConfig: InMemoryCacheConfig = {},\n  customFetch: HttpOptions['fetch'] = fetch,\n  customWs: unknown = WebSocket,\n  options: DefaultOptions = {}\n) => {\n  const headers =\n    access === 'user'\n      ? { Authorization: `Bearer ${token()}` }\n      : { 'x-hasura-admin-secret': `${token()}` };\n\n  const httpLink = createHttpLink({\n    uri: `${secure ? 'https' : 'http'}://${uri}`,\n    headers: { ...headers },\n    fetch: customFetch,\n  });\n\n  const wsLink = new WebSocketLink({\n    uri: `${secure ? 'wss' : 'ws'}://${uri}`,\n    options: {\n      lazy: true,\n      reconnect: true,\n      connectionParams: async () => ({\n        headers: { ...headers },\n      }),\n    },\n    webSocketImpl: customWs,\n  });\n\n  // split based on operation type - so queries/mutations go via HTTP and subscriptions go via WS\n  const link = split(\n    ({ query }) => {\n      const { kind, operation } = getMainDefinition(\n        query\n      ) as OperationDefinitionNode;\n      return kind === 'OperationDefinition' && operation === 'subscription';\n    },\n    wsLink,\n    httpLink\n  );\n\n  // Initialize ApolloClient\n  const client: ApolloClient<NormalizedCacheObject> = new ApolloClient({\n    cache: new InMemoryCache(cacheConfig),\n    link,\n    defaultOptions: options,\n    //remove in production\n    connectToDevTools: true,\n  });\n\n  return client;\n};\n","module.exports = require(\"@apollo/client\");","module.exports = require(\"@apollo/client/link/ws\");","module.exports = require(\"@apollo/client/utilities\");","module.exports = require(\"apollo-datasource\");","module.exports = require(\"apollo-server-express\");","module.exports = require(\"axios\");","module.exports = require(\"cross-fetch\");","module.exports = require(\"express\");","module.exports = require(\"express-jwt\");","module.exports = require(\"jwks-rsa\");","module.exports = require(\"tslib\");","module.exports = require(\"type-graphql\");","module.exports = require(\"ws\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { apolloBootstrapper } from '@idleverse/graphql-utils';\nimport { DataSources } from 'apollo-server-core/dist/requestPipeline';\nimport { ApolloServer } from 'apollo-server-express';\nimport fetch from 'cross-fetch';\nimport express from 'express';\nimport jwt from 'express-jwt';\nimport jwksRsa from 'jwks-rsa';\nimport { buildSchema } from 'type-graphql';\nimport { authChecker } from './authChecker';\nimport { Auth0API } from './datasources/auth0-api';\nimport { Context } from './datasources/context';\nimport { FoodAPI } from './datasources/food-api';\nimport { RegisterResolver } from './entities/register';\n\nimport ws = require('ws');\n\n(async () => {\n  const client = apolloBootstrapper(\n    process.env.HASURA_URI,\n    process.env.SECURE_HASURA === 'secure',\n    'admin-secret',\n    () => process.env.HASURA_ADMIN_SECRET_FOOD,\n    {},\n    fetch,\n    ws,\n    {\n      query: {\n        fetchPolicy: 'no-cache',\n      },\n      mutate: {\n        fetchPolicy: 'no-cache',\n      },\n    }\n  );\n\n  const schema = await buildSchema({\n    resolvers: [RegisterResolver],\n    authChecker,\n    emitSchemaFile: true,\n  });\n\n  const app = express();\n  const path = '/graphql';\n\n  const server = new ApolloServer({\n    schema,\n    context: ({ req }) => {\n      const context: Partial<Context> = {\n        req,\n        user: req['user'], // `req.user` comes from `express-jwt`\n      };\n\n      if (req['user']) {\n        if (context.req['user'][process.env.HASURA_NAMESPACE]) {\n          if (\n            context.req['user'][process.env.HASURA_NAMESPACE][\n              'x-hasura-allowed-roles'\n            ]\n          )\n            context.roles =\n              context.req['user'][process.env.HASURA_NAMESPACE][\n                'x-hasura-allowed-roles'\n              ];\n          if (\n            context.req['user'][process.env.HASURA_NAMESPACE][\n              'x-hasura-user-id'\n            ]\n          )\n            context.id =\n              context.req['user'][process.env.HASURA_NAMESPACE][\n                'x-hasura-user-id'\n              ];\n        }\n      }\n\n      return context;\n    },\n    dataSources: (): DataSources<Partial<Context['dataSources']>> => {\n      return {\n        FoodAPI: new FoodAPI(client),\n        auth0API: new Auth0API(),\n      };\n    },\n    introspection: true,\n  });\n\n  // Mount a jwt or other authentication middleware that is run before the GraphQL execution\n  app.use(\n    path,\n    jwt({\n      credentialsRequired: false,\n      // Dynamically provide a signing key\n      // based on the kid in the header and\n      // the signing keys provided by the JWKS endpoint.\n      secret: jwksRsa.expressJwtSecret({\n        cache: true,\n        rateLimit: true,\n        jwksRequestsPerMinute: 5,\n        jwksUri: `https://${process.env.AUTH0_DOMAIN}/.well-known/jwks.json`,\n      }),\n\n      // Validate the audience and the issuer.\n      audience: process.env.AUTH0_CLIENT_ID,\n      issuer: [`https://${process.env.AUTH0_DOMAIN}/`],\n      algorithms: ['RS256'],\n    })\n  );\n\n  await server.start();\n\n  // Apply the GraphQL server middleware\n  server.applyMiddleware({ app, path });\n\n  // Launch the express server\n  app.listen({ port: process.env.PORT || 4000 }, () =>\n    console.log(\n      `🚀 Server ready at http://localhost:${process.env.PORT || 4000}${\n        server.graphqlPath\n      }`\n    )\n  );\n})();\n"],"names":["authChecker","async","context","roles","length","idTokenRoles","role","includes","Auth0API","DataSource","trySetUserRole","id","this","post","options","method","url","process","env","AUTH0_DOMAIN","headers","data","grant_type","client_id","AUTH0_MANAGEMENT_API_CLIENT_ID","client_secret","AUTH0_MANAGEMENT_API_CLIENT_SECRET","audience","request","path","requestOptions","getManagementToken","authorization","access_token","FoodAPI","constructor","client","super","trySetDisplayName","display_name","mutate","mutation","SetDisplayNameByUserIdDocument","variables","Register","Field","ObjectType","RegisterResolver","displayName","Error","resDisplayName","dataSources","foodAPI","update_user_info_by_pk","auth0API","console","log","shit","updatedName","Mutation","returns","nullable","Ctx","Arg","Context","Resolver","of","defaultOptions","Advert_Constraint","Advert_Select_Column","Advert_Update_Column","Board_Object_Constraint","Board_Object_Select_Column","Board_Object_Update_Column","Diner_Constraint","Diner_Select_Column","Diner_Update_Column","Drink_Constraint","Drink_Select_Column","Drink_Update_Column","Employee_Constraint","Employee_Select_Column","Employee_Update_Column","Game_Constraint","Game_Select_Column","Game_Update_Column","Garden_Constraint","Garden_Select_Column","Garden_Update_Column","House_Constraint","House_Food_Demand_Constraint","House_Food_Demand_Select_Column","House_Food_Demand_Update_Column","House_Select_Column","House_Update_Column","Order_By","Player_Constraint","Player_Food_Constraint","Player_Food_Select_Column","Player_Food_Update_Column","Player_Select_Column","Player_Update_Column","Road_Connection_Constraint","Road_Connection_Select_Column","Road_Connection_Update_Column","Road_Constraint","Road_Select_Column","Road_Update_Column","User_Info_Constraint","User_Info_Select_Column","User_Info_Update_Column","User_Me_Select_Column","SelfDocument","gql","baseOptions","Apollo","useQuery","useLazyQuery","useMutation","apolloBootstrapper","uri","secure","access","token","cacheConfig","customFetch","fetch","customWs","WebSocket","Authorization","httpLink","createHttpLink","wsLink","WebSocketLink","lazy","reconnect","connectionParams","webSocketImpl","link","split","query","getMainDefinition","kind","operation","ApolloClient","cache","InMemoryCache","connectToDevTools","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","HASURA_URI","SECURE_HASURA","HASURA_ADMIN_SECRET_FOOD","ws","fetchPolicy","schema","buildSchema","resolvers","emitSchemaFile","app","server","ApolloServer","req","user","HASURA_NAMESPACE","introspection","use","credentialsRequired","secret","expressJwtSecret","rateLimit","jwksRequestsPerMinute","jwksUri","AUTH0_CLIENT_ID","issuer","algorithms","start","applyMiddleware","listen","port","PORT","graphqlPath"],"sourceRoot":""}