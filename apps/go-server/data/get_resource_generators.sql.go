// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: get_resource_generators.sql

package idleversedata

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const getGenerators = `-- name: GetGenerators :many
SELECT empire_generators.galactic_empire_id,
    empire_generators.count,
    generator_type.generation_rate,
    generator_type.name AS generator_name,
    resource_1.type AS resource_1_name,
    empire_resource_1.id AS resource_1_id,
    empire_resource_1.value AS resource_1_val,
    resource_2.type AS resource_1_name,
    empire_resource_2.id AS resource_2_id,
    empire_resource_2.value AS resource_2_val
FROM galactic_empire_resource_generator AS empire_generators
    INNER JOIN resource_generator AS generator_type ON empire_generators.generator_type_id = generator_type.id
    INNER JOIN galactic_empire_resources AS empire_resource_1 ON generator_type.resource_type_1_id = empire_resource_1.resource_type_id
    LEFT JOIN galactic_empire_resources AS empire_resource_2 ON generator_type.resource_type_2_id = empire_resource_2.resource_type_id
    INNER JOIN resource_type AS resource_1 ON generator_type.resource_type_1_id = resource_1.id
    LEFT JOIN resource_type AS resource_2 ON generator_type.resource_type_2_id = resource_2.id
`

type GetGeneratorsRow struct {
	GalacticEmpireID uuid.UUID
	Count            string
	GenerationRate   []string
	GeneratorName    string
	Resource1Name    string
	Resource1ID      uuid.UUID
	Resource1Val     int32
	Resource1Name_2  sql.NullString
	Resource2ID      uuid.NullUUID
	Resource2Val     sql.NullInt32
}

func (q *Queries) GetGenerators(ctx context.Context) ([]GetGeneratorsRow, error) {
	rows, err := q.db.QueryContext(ctx, getGenerators)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGeneratorsRow
	for rows.Next() {
		var i GetGeneratorsRow
		if err := rows.Scan(
			&i.GalacticEmpireID,
			&i.Count,
			pq.Array(&i.GenerationRate),
			&i.GeneratorName,
			&i.Resource1Name,
			&i.Resource1ID,
			&i.Resource1Val,
			&i.Resource1Name_2,
			&i.Resource2ID,
			&i.Resource2Val,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
